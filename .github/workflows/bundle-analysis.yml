name: Bundle Analysis

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  bundle-analysis:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run bundle analysis
      run: npm run analyze
      continue-on-error: true  # Non bloccare la pipeline
      
    - name: Run size limit check
      run: npm run size
      continue-on-error: true  # Non bloccare la pipeline
      
    - name: Generate bundle metrics JSON
      run: node scripts/generate-bundle-metrics.cjs
      continue-on-error: true
        
    - name: Upload bundle artifacts
      uses: actions/upload-artifact@v4
      if: always()  # Upload anche se analyze fallisce
      with:
        name: bundle-analysis-${{ github.sha }}
        path: |
          artifacts/bundle-stats.html
          artifacts/bundle-metrics.json
        retention-days: 30
        
    - name: Comment bundle size (PR only)
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          let bundleInfo = '';
          
          try {
            // Leggi metriche JSON generate
            const metricsPath = 'artifacts/bundle-metrics.json';
            if (fs.existsSync(metricsPath)) {
              const metrics = JSON.parse(fs.readFileSync(metricsPath, 'utf8'));
              
              bundleInfo += '## üì¶ Bundle Analysis\n\n';
              bundleInfo += `**Total Size**: ${metrics.summary.totalSizeKB} KB\n`;
              bundleInfo += `**Files**: ${metrics.totalFiles} (${Object.keys(metrics.javascript).length} JS + ${Object.keys(metrics.css).length} CSS)\n\n`;
              
              // Top 5 largest JS files
              const jsFiles = Object.entries(metrics.javascript)
                .sort(([,a], [,b]) => b.size - a.size)
                .slice(0, 5);
              
              bundleInfo += '### üî• Largest JavaScript Files:\n';
              jsFiles.forEach(([file, data]) => {
                bundleInfo += `- \`${file}\`: ${data.sizeKB} KB (${data.type})\n`;
              });
              
              bundleInfo += '\nüìä **Detailed analysis**: Download `bundle-analysis` artifact';
            } else {
              bundleInfo = '‚ö†Ô∏è Bundle metrics not available';
            }
            
          } catch (error) {
            bundleInfo = '‚ùå Could not analyze bundle sizes: ' + error.message;
          }
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: bundleInfo
          });
