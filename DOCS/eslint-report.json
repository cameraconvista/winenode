(node:10266) ESLintIgnoreWarning: The ".eslintignore" file is no longer supported. Switch to using the "ignores" property in "eslint.config.js": https://eslint.org/docs/latest/use/configure/migration-guide#ignoring-files
(Use `node --trace-warnings ...` to show where the warning was created)
[{"filePath":"/Users/dero/Documents/winenode_main/src/App.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/dero/Documents/winenode_main/src/components/AddSupplierModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/dero/Documents/winenode_main/src/components/EditSupplierModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/dero/Documents/winenode_main/src/components/FilterModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/dero/Documents/winenode_main/src/components/FornitoreSelector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/dero/Documents/winenode_main/src/components/GestisciOrdiniInventoryModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/dero/Documents/winenode_main/src/components/HomeInventoryModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/dero/Documents/winenode_main/src/components/IntroPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/dero/Documents/winenode_main/src/components/QuantityPicker.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/dero/Documents/winenode_main/src/components/WineDetailsModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/dero/Documents/winenode_main/src/components/modals/CarrelloOrdiniModal 2.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/dero/Documents/winenode_main/src/components/modals/CarrelloOrdiniModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/dero/Documents/winenode_main/src/components/modals/ConfermaEliminazioneModal 2.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/dero/Documents/winenode_main/src/components/modals/ConfermaEliminazioneModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/dero/Documents/winenode_main/src/components/modals/ConfirmArchiveModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/dero/Documents/winenode_main/src/components/modals/NuovoOrdineModal 2.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/dero/Documents/winenode_main/src/components/modals/NuovoOrdineModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/dero/Documents/winenode_main/src/components/modals/SmartGestisciModal 2.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/dero/Documents/winenode_main/src/components/modals/SmartGestisciModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/dero/Documents/winenode_main/src/components/modals/WhatsAppOrderModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/dero/Documents/winenode_main/src/components/orders/OrdineRicevutoCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/dero/Documents/winenode_main/src/components/search/WineSearchBar 2.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/dero/Documents/winenode_main/src/components/search/WineSearchBar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/dero/Documents/winenode_main/src/components/security/OrdersPinModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/dero/Documents/winenode_main/src/components/security/PinPad.tsx","messages":[{"ruleId":"complexity","severity":1,"message":"Function 'PinPad' has a complexity of 23. Maximum allowed is 20.","line":14,"column":16,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":107,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Delete, Check } from 'lucide-react';\n\ninterface PinPadProps {\n  onDigit: (digit: string) => void;\n  onDelete: () => void;\n  onSubmit: () => void;\n  disabled?: boolean;\n  canSubmit?: boolean;\n  isValidPin?: boolean;\n  isInvalidPin?: boolean;\n}\n\nexport default function PinPad({ \n  onDigit, \n  onDelete, \n  onSubmit, \n  disabled = false,\n  canSubmit = false,\n  isValidPin = false,\n  isInvalidPin = false\n}: PinPadProps) {\n  const digits = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'];\n\n  return (\n    <div className=\"grid grid-cols-3 gap-4 max-w-sm mx-auto p-4 justify-center items-center\">\n      {/* Digits 1-9 */}\n      {digits.slice(0, 9).map((digit) => (\n        <button\n          key={digit}\n          type=\"button\"\n          onClick={() => onDigit(digit)}\n          disabled={disabled}\n          className=\"h-14 w-14 rounded-full border-2 font-bold text-xl transition-all duration-150 active:scale-98 active:shadow-lg disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center touch-manipulation\"\n          style={{\n            backgroundColor: '#fff9dc',\n            color: '#541111',\n            borderColor: 'rgba(84, 17, 17, 0.4)',\n            fontSize: '18px',\n            minHeight: '56px',\n            minWidth: '56px'\n          }}\n          aria-label={`Numero ${digit}`}\n        >\n          {digit}\n        </button>\n      ))}\n      \n      {/* Bottom row: Delete, 0, Submit */}\n      <button\n        type=\"button\"\n        onClick={onDelete}\n        disabled={disabled}\n        className=\"h-14 w-14 rounded-full border-2 font-bold text-xl transition-all duration-150 active:scale-98 active:shadow-lg disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center touch-manipulation\"\n        style={{\n          backgroundColor: '#fff9dc',\n          color: '#541111',\n          borderColor: 'rgba(84, 17, 17, 0.4)',\n          fontSize: '18px',\n          minHeight: '56px',\n          minWidth: '56px'\n        }}\n        aria-label=\"Cancella\"\n      >\n        C\n      </button>\n      \n      <button\n        type=\"button\"\n        onClick={() => onDigit('0')}\n        disabled={disabled}\n        className=\"h-14 w-14 rounded-full border-2 font-bold text-xl transition-all duration-150 active:scale-98 active:shadow-lg disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center touch-manipulation\"\n        style={{\n          backgroundColor: '#fff9dc',\n          color: '#541111',\n          borderColor: 'rgba(84, 17, 17, 0.4)',\n          fontSize: '18px',\n          minHeight: '56px',\n          minWidth: '56px'\n        }}\n        aria-label=\"Numero 0\"\n      >\n        0\n      </button>\n      \n      <button\n        type=\"button\"\n        onClick={onSubmit}\n        disabled={disabled || !canSubmit}\n        className=\"h-14 w-14 rounded-full border-2 font-bold transition-all duration-150 active:scale-98 active:shadow-lg disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center touch-manipulation\"\n        style={{\n          backgroundColor: isInvalidPin && canSubmit && !disabled ? '#ef4444' : \n                          isValidPin && canSubmit && !disabled ? '#22c55e' : '#fff9dc',\n          color: (isInvalidPin || isValidPin) && canSubmit && !disabled ? '#ffffff' : '#541111',\n          borderColor: isInvalidPin && canSubmit && !disabled ? '#dc2626' :\n                      isValidPin && canSubmit && !disabled ? '#16a34a' : 'rgba(84, 17, 17, 0.4)',\n          minHeight: '56px',\n          minWidth: '56px'\n        }}\n        aria-label=\"Conferma PIN\"\n        aria-disabled={disabled || !canSubmit}\n      >\n        <Check size={20} />\n      </button>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dero/Documents/winenode_main/src/config/constants 2.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/dero/Documents/winenode_main/src/config/constants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/dero/Documents/winenode_main/src/config/featureFlags 2.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/dero/Documents/winenode_main/src/config/featureFlags.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/dero/Documents/winenode_main/src/config/features 2.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/dero/Documents/winenode_main/src/config/features.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/dero/Documents/winenode_main/src/constants/ordiniLabels 2.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/dero/Documents/winenode_main/src/constants/ordiniLabels.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/dero/Documents/winenode_main/src/contexts/OrdiniContext 2.tsx","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Function 'OrdiniProvider' has too many lines (236). Maximum allowed is 200.","line":39,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":348,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { useSupabaseOrdini } from '../hooks/useSupabaseOrdini';\nimport { isFeatureEnabled } from '../config/featureFlags';\nimport useWines from '../hooks/useWines';\n\nexport interface OrdineDettaglio {\n  wineId: string;\n  wineName: string;\n  quantity: number;\n  unit: 'bottiglie' | 'cartoni';\n  unitPrice: number;\n  totalPrice: number;\n}\n\nexport interface Ordine {\n  id: string;\n  fornitore: string;\n  totale: number;\n  bottiglie: number;\n  data: string;\n  stato: 'sospeso' | 'inviato' | 'ricevuto' | 'archiviato'; // Stati validi database Supabase\n  tipo: 'inviato' | 'ricevuto';\n  dettagli?: OrdineDettaglio[];\n}\n\ninterface OrdiniContextType {\n  ordiniInviati: Ordine[];\n  ordiniStorico: Ordine[];\n  loading: boolean;\n  aggiungiOrdine: (ordine: Omit<Ordine, 'id'>) => Promise<void>;\n  aggiornaStatoOrdine: (ordineId: string, nuovoStato: Ordine['stato']) => Promise<void>;\n  aggiornaQuantitaOrdine: (ordineId: string, dettagli: OrdineDettaglio[]) => void;\n  confermaRicezioneOrdine: (ordineId: string) => Promise<void>;\n  eliminaOrdineInviato: (ordineId: string) => Promise<void>;\n  eliminaOrdineStorico: (ordineId: string) => Promise<void>;\n}\n\nconst OrdiniContext = createContext<OrdiniContextType | undefined>(undefined);\nexport function OrdiniProvider({ children }: { children: ReactNode }) {\n  const [ordiniInviati, setOrdiniInviati] = useState<Ordine[]>([]);\n  const [ordiniStorico, setOrdiniStorico] = useState<Ordine[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [processingOrders, setProcessingOrders] = useState<Set<string>>(new Set());\n  \n  const supabaseOrdini = useSupabaseOrdini();\n  const { wines, updateWineInventory } = useWines();\n\n  // Audit trail function\n  const logAuditEvent = (action: string, ordineId: string, details: any) => {\n    if (isFeatureEnabled('AUDIT_LOGS')) {\n      const auditEntry = {\n        timestamp: new Date().toISOString(),\n        action,\n        ordineId,\n        details,\n        user: 'current_user' // TODO: get from auth context\n      };\n      console.log('📋 AUDIT:', auditEntry);\n      // TODO: Save to audit table in database\n    }\n  };\n\n  // Idempotency guard\n  const isOrderProcessing = (ordineId: string): boolean => {\n    return processingOrders.has(ordineId);\n  };\n\n  const setOrderProcessing = (ordineId: string, processing: boolean) => {\n    setProcessingOrders(prev => {\n      const newSet = new Set(prev);\n      if (processing) {\n        newSet.add(ordineId);\n      } else {\n        newSet.delete(ordineId);\n      }\n      return newSet;\n    });\n  };\n\n  useEffect(() => {\n    const loadOrdiniFromSupabase = async () => {\n      try {\n        setLoading(true);\n        console.log('🔄 Caricando ordini da Supabase...');\n        const { inviati, storico } = await supabaseOrdini.loadOrdini();\n        \n        setOrdiniInviati(inviati);\n        setOrdiniStorico(storico);\n        \n        console.log('✅ Ordini caricati:', {\n          inviati: inviati.length,\n          storico: storico.length\n        });\n      } catch (error) {\n        console.error('❌ Errore caricamento ordini nel context:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadOrdiniFromSupabase();\n  }, []);\n\n  const aggiungiOrdine = async (ordine: Omit<Ordine, 'id'>) => {\n    console.log('💾 Salvando ordine in Supabase:', ordine);\n\n    const ordineId = await supabaseOrdini.salvaOrdine(ordine);\n    \n    if (ordineId) {\n      const nuovoOrdine: Ordine = {\n        ...ordine,\n        id: ordineId\n      };\n\n      // Verifica che l'ordine non esista già prima di aggiungerlo\n      if (ordine.tipo === 'inviato') {\n        setOrdiniInviati(prev => {\n          const exists = prev.some(o => o.id === ordineId);\n          if (exists) {\n            console.log('⚠️ Ordine già presente, evito duplicazione:', ordineId);\n            return prev;\n          }\n          return [nuovoOrdine, ...prev];\n        });\n      }\n      \n      console.log('✅ Ordine salvato e aggiunto al context:', ordineId);\n    } else {\n      console.error('❌ Errore salvataggio ordine');\n    }\n  };\n\n  const aggiornaStatoOrdine = async (ordineId: string, nuovoStato: Ordine['stato']) => {\n    console.log('🔄 Aggiornando stato ordine in Supabase:', ordineId, '→', nuovoStato);\n    \n    const success = await supabaseOrdini.aggiornaStatoOrdine(ordineId, nuovoStato);\n    \n    if (success) {\n      const aggiorna = (ordini: Ordine[]) =>\n        ordini.map(ordine =>\n          ordine.id === ordineId ? { ...ordine, stato: nuovoStato } : ordine\n        );\n\n      setOrdiniInviati(aggiorna);\n      setOrdiniStorico(aggiorna);\n      \n      console.log('✅ Stato ordine aggiornato nel context');\n    }\n  };\n\n  // spostaOrdineInviatiARicevuti rimossa - ordini vanno direttamente da inviati ad archiviati\n\n  const aggiornaQuantitaOrdine = (ordineId: string, dettagli: OrdineDettaglio[]) => {\n    console.log('📝 Aggiornando quantità ordine:', ordineId, dettagli);\n    \n    const nuoveTotali = dettagli.reduce((acc, item) => ({\n      bottiglie: acc.bottiglie + (item.quantity * (item.unit === 'cartoni' ? 6 : 1)),\n      totale: acc.totale + item.totalPrice\n    }), { bottiglie: 0, totale: 0 });\n\n    // Aggiorna ordiniInviati (per Gestione Ordini)\n    setOrdiniInviati(prev =>\n      prev.map(ordine =>\n        ordine.id === ordineId\n          ? {\n              ...ordine,\n              dettagli,\n              bottiglie: nuoveTotali.bottiglie,\n              totale: nuoveTotali.totale\n            }\n          : ordine\n      )\n    );\n\n    // Nota: ordini ricevuti rimossi dal sistema\n  };\n\n  const confermaRicezioneOrdine = async (ordineId: string) => {\n    console.log('✅ Confermando ricezione ordine:', ordineId);\n    \n    // Idempotency guard - previene doppi click\n    if (isFeatureEnabled('IDEMPOTENCY_GUARD') && isOrderProcessing(ordineId)) {\n      console.log('⚠️ Ordine già in elaborazione, ignoro richiesta duplicata:', ordineId);\n      return;\n    }\n\n    // Audit trail - start\n    logAuditEvent('CONFERMA_RICEZIONE_START', ordineId, { timestamp: Date.now() });\n\n    try {\n      // Set processing flag\n      if (isFeatureEnabled('IDEMPOTENCY_GUARD')) {\n        setOrderProcessing(ordineId, true);\n      }\n\n      // Atomic transaction simulation\n      if (isFeatureEnabled('INVENTORY_TX')) {\n        console.log('🔒 Inizio transazione atomica per ordine:', ordineId);\n      }\n\n      // Trova l'ordine prima di aggiornare lo stato (cerca solo in inviati)\n      const ordine = ordiniInviati.find(o => o.id === ordineId);\n      \n      if (!ordine) {\n        logAuditEvent('CONFERMA_RICEZIONE_ERROR', ordineId, { error: 'Ordine non trovato' });\n      }\n\n      // AGGIORNA LE GIACENZE REALI DEI VINI PRIMA DI ARCHIVIARE\n      if (ordine.dettagli) {\n        console.log('📦 Aggiornamento giacenze per ordine:', ordine);\n        \n        // Aggiorna le giacenze per ogni vino nell'ordine\n        for (const item of ordine.dettagli) {\n          const currentWine = wines.find(w => w.id === item.wineId);\n          if (currentWine) {\n            const currentInventory = currentWine.inventory || 0;\n            const bottlesToAdd = item.quantity * (item.unit === 'cartoni' ? 6 : 1);\n            const newInventory = currentInventory + bottlesToAdd;\n            \n            console.log(`📦 ${item.wineName}: ${currentInventory} + ${bottlesToAdd} = ${newInventory}`);\n            \n            // Aggiorna la giacenza nel database\n            await updateWineInventory(item.wineId, newInventory);\n          }\n        }\n        \n        // Log delle quantità per audit\n        const inventoryChanges = ordine.dettagli?.map(item => {\n          const currentWine = wines.find(w => w.id === item.wineId);\n          const currentInventory = currentWine?.inventory || 0;\n          const bottlesToAdd = item.quantity * (item.unit === 'cartoni' ? 6 : 1);\n          return {\n            wineId: item.wineId,\n            wineName: item.wineName,\n            quantityBefore: currentInventory,\n            quantityAfter: currentInventory + bottlesToAdd,\n            delta: bottlesToAdd\n          };\n        }) || [];\n\n        logAuditEvent('INVENTORY_UPDATE', ordineId, { \n          changes: inventoryChanges,\n          totalBottiglie: ordine.bottiglie,\n          totalValue: ordine.totale\n        });\n      }\n\n      // Aggiorna lo stato nel database\n      const success = await supabaseOrdini.aggiornaStatoOrdine(ordineId, 'archiviato');\n      \n      if (success) {\n        // Crea l'ordine completato\n        const ordineCompletato: Ordine = {\n          ...ordine,\n          stato: 'archiviato' // Stato finale per ordini completati\n        };\n        \n        // Aggiungi allo storico (archiviati)\n        setOrdiniStorico(prevStorico => {\n          // Controlla se l'ordine esiste già nello storico per evitare duplicazioni\n          const exists = prevStorico.some(o => o.id === ordineId);\n          if (exists) {\n            console.log('⚠️ Ordine già presente nello storico, evito duplicazione:', ordineId);\n            logAuditEvent('CONFERMA_RICEZIONE_DUPLICATE', ordineId, { warning: 'Ordine già archiviato' });\n            return prevStorico;\n          }\n          return [ordineCompletato, ...prevStorico];\n        });\n        \n        // Rimuovi dalla lista inviati (unica lista di origine ora)\n        setOrdiniInviati(prev => prev.filter(o => o.id !== ordineId));\n        console.log('📤 Ordine rimosso da inviati e spostato in archiviati:', ordineId);\n        \n        // Audit trail - success\n        logAuditEvent('CONFERMA_RICEZIONE_SUCCESS', ordineId, { \n          finalState: 'archiviato',\n          movedToStorico: true,\n          sourceList: 'inviati',\n          processingTime: Date.now()\n        });\n\n        if (isFeatureEnabled('INVENTORY_TX')) {\n          console.log('✅ Transazione atomica completata per ordine:', ordineId);\n        }\n      } else {\n        logAuditEvent('CONFERMA_RICEZIONE_ERROR', ordineId, { error: 'Aggiornamento database fallito' });\n      }\n    } catch (error) {\n      console.error('❌ Errore durante conferma ricezione:', error);\n      logAuditEvent('CONFERMA_RICEZIONE_ERROR', ordineId, { error: error.message });\n    } finally {\n      // Clear processing flag\n      if (isFeatureEnabled('IDEMPOTENCY_GUARD')) {\n        setOrderProcessing(ordineId, false);\n      }\n    }\n  };\n\n  const eliminaOrdineInviato = async (ordineId: string) => {\n    console.log('🗑️ Eliminando ordine inviato da Supabase:', ordineId);\n    \n    const success = await supabaseOrdini.eliminaOrdine(ordineId);\n    \n    if (success) {\n      setOrdiniInviati(prev => {\n        const ordine = prev.find(o => o.id === ordineId);\n        if (ordine) {\n          console.log('📋 Ordine inviato eliminato:', ordine.fornitore, '- €' + ordine.totale.toFixed(2));\n        }\n        return prev.filter(o => o.id !== ordineId);\n      });\n    }\n  };\n\n  // eliminaOrdineRicevuto rimossa - ordini ricevuti non esistono più\n\n  const eliminaOrdineStorico = async (ordineId: string) => {\n    console.log('🗑️ Eliminando ordine storico da Supabase:', ordineId);\n    \n    const success = await supabaseOrdini.eliminaOrdine(ordineId);\n    \n    if (success) {\n      setOrdiniStorico(prev => {\n        const ordine = prev.find(o => o.id === ordineId);\n        if (ordine) {\n          console.log('📋 Ordine storico eliminato:', ordine.fornitore, '- €' + ordine.totale.toFixed(2));\n        }\n        return prev.filter(o => o.id !== ordineId);\n      });\n    }\n  };\n\n  return (\n    <OrdiniContext.Provider value={{\n      ordiniInviati,\n      ordiniStorico,\n      loading,\n      aggiungiOrdine,\n      aggiornaStatoOrdine,\n      aggiornaQuantitaOrdine,\n      confermaRicezioneOrdine,\n      eliminaOrdineInviato,\n      eliminaOrdineStorico\n    }}>\n      {children}\n    </OrdiniContext.Provider>\n  );\n}\n\nexport function useOrdini() {\n  const context = useContext(OrdiniContext);\n  if (context === undefined) {\n    throw new Error('useOrdini must be used within an OrdiniProvider');\n  }\n  return context;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dero/Documents/winenode_main/src/contexts/OrdiniContext.tsx","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Function 'OrdiniProvider' has too many lines (236). Maximum allowed is 200.","line":39,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":348,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { useSupabaseOrdini } from '../hooks/useSupabaseOrdini';\nimport { isFeatureEnabled } from '../config/featureFlags';\nimport useWines from '../hooks/useWines';\n\nexport interface OrdineDettaglio {\n  wineId: string;\n  wineName: string;\n  quantity: number;\n  unit: 'bottiglie' | 'cartoni';\n  unitPrice: number;\n  totalPrice: number;\n}\n\nexport interface Ordine {\n  id: string;\n  fornitore: string;\n  totale: number;\n  bottiglie: number;\n  data: string;\n  stato: 'sospeso' | 'inviato' | 'ricevuto' | 'archiviato'; // Stati validi database Supabase\n  tipo: 'inviato' | 'ricevuto';\n  dettagli?: OrdineDettaglio[];\n}\n\ninterface OrdiniContextType {\n  ordiniInviati: Ordine[];\n  ordiniStorico: Ordine[];\n  loading: boolean;\n  aggiungiOrdine: (ordine: Omit<Ordine, 'id'>) => Promise<void>;\n  aggiornaStatoOrdine: (ordineId: string, nuovoStato: Ordine['stato']) => Promise<void>;\n  aggiornaQuantitaOrdine: (ordineId: string, dettagli: OrdineDettaglio[]) => void;\n  confermaRicezioneOrdine: (ordineId: string) => Promise<void>;\n  eliminaOrdineInviato: (ordineId: string) => Promise<void>;\n  eliminaOrdineStorico: (ordineId: string) => Promise<void>;\n}\n\nconst OrdiniContext = createContext<OrdiniContextType | undefined>(undefined);\nexport function OrdiniProvider({ children }: { children: ReactNode }) {\n  const [ordiniInviati, setOrdiniInviati] = useState<Ordine[]>([]);\n  const [ordiniStorico, setOrdiniStorico] = useState<Ordine[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [processingOrders, setProcessingOrders] = useState<Set<string>>(new Set());\n  \n  const supabaseOrdini = useSupabaseOrdini();\n  const { wines, updateWineInventory } = useWines();\n\n  // Audit trail function\n  const logAuditEvent = (action: string, ordineId: string, details: any) => {\n    if (isFeatureEnabled('AUDIT_LOGS')) {\n      const auditEntry = {\n        timestamp: new Date().toISOString(),\n        action,\n        ordineId,\n        details,\n        user: 'current_user' // TODO: get from auth context\n      };\n      console.log('📋 AUDIT:', auditEntry);\n      // TODO: Save to audit table in database\n    }\n  };\n\n  // Idempotency guard\n  const isOrderProcessing = (ordineId: string): boolean => {\n    return processingOrders.has(ordineId);\n  };\n\n  const setOrderProcessing = (ordineId: string, processing: boolean) => {\n    setProcessingOrders(prev => {\n      const newSet = new Set(prev);\n      if (processing) {\n        newSet.add(ordineId);\n      } else {\n        newSet.delete(ordineId);\n      }\n      return newSet;\n    });\n  };\n\n  useEffect(() => {\n    const loadOrdiniFromSupabase = async () => {\n      try {\n        setLoading(true);\n        console.log('🔄 Caricando ordini da Supabase...');\n        const { inviati, storico } = await supabaseOrdini.loadOrdini();\n        \n        setOrdiniInviati(inviati);\n        setOrdiniStorico(storico);\n        \n        console.log('✅ Ordini caricati:', {\n          inviati: inviati.length,\n          storico: storico.length\n        });\n      } catch (error) {\n        console.error('❌ Errore caricamento ordini nel context:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadOrdiniFromSupabase();\n  }, []);\n\n  const aggiungiOrdine = async (ordine: Omit<Ordine, 'id'>) => {\n    console.log('💾 Salvando ordine in Supabase:', ordine);\n\n    const ordineId = await supabaseOrdini.salvaOrdine(ordine);\n    \n    if (ordineId) {\n      const nuovoOrdine: Ordine = {\n        ...ordine,\n        id: ordineId\n      };\n\n      // Verifica che l'ordine non esista già prima di aggiungerlo\n      if (ordine.tipo === 'inviato') {\n        setOrdiniInviati(prev => {\n          const exists = prev.some(o => o.id === ordineId);\n          if (exists) {\n            console.log('⚠️ Ordine già presente, evito duplicazione:', ordineId);\n            return prev;\n          }\n          return [nuovoOrdine, ...prev];\n        });\n      }\n      \n      console.log('✅ Ordine salvato e aggiunto al context:', ordineId);\n    } else {\n      console.error('❌ Errore salvataggio ordine');\n    }\n  };\n\n  const aggiornaStatoOrdine = async (ordineId: string, nuovoStato: Ordine['stato']) => {\n    console.log('🔄 Aggiornando stato ordine in Supabase:', ordineId, '→', nuovoStato);\n    \n    const success = await supabaseOrdini.aggiornaStatoOrdine(ordineId, nuovoStato);\n    \n    if (success) {\n      const aggiorna = (ordini: Ordine[]) =>\n        ordini.map(ordine =>\n          ordine.id === ordineId ? { ...ordine, stato: nuovoStato } : ordine\n        );\n\n      setOrdiniInviati(aggiorna);\n      setOrdiniStorico(aggiorna);\n      \n      console.log('✅ Stato ordine aggiornato nel context');\n    }\n  };\n\n  // spostaOrdineInviatiARicevuti rimossa - ordini vanno direttamente da inviati ad archiviati\n\n  const aggiornaQuantitaOrdine = (ordineId: string, dettagli: OrdineDettaglio[]) => {\n    console.log('📝 Aggiornando quantità ordine:', ordineId, dettagli);\n    \n    const nuoveTotali = dettagli.reduce((acc, item) => ({\n      bottiglie: acc.bottiglie + (item.quantity * (item.unit === 'cartoni' ? 6 : 1)),\n      totale: acc.totale + item.totalPrice\n    }), { bottiglie: 0, totale: 0 });\n\n    // Aggiorna ordiniInviati (per Gestione Ordini)\n    setOrdiniInviati(prev =>\n      prev.map(ordine =>\n        ordine.id === ordineId\n          ? {\n              ...ordine,\n              dettagli,\n              bottiglie: nuoveTotali.bottiglie,\n              totale: nuoveTotali.totale\n            }\n          : ordine\n      )\n    );\n\n    // Nota: ordini ricevuti rimossi dal sistema\n  };\n\n  const confermaRicezioneOrdine = async (ordineId: string) => {\n    console.log('✅ Confermando ricezione ordine:', ordineId);\n    \n    // Idempotency guard - previene doppi click\n    if (isFeatureEnabled('IDEMPOTENCY_GUARD') && isOrderProcessing(ordineId)) {\n      console.log('⚠️ Ordine già in elaborazione, ignoro richiesta duplicata:', ordineId);\n      return;\n    }\n\n    // Audit trail - start\n    logAuditEvent('CONFERMA_RICEZIONE_START', ordineId, { timestamp: Date.now() });\n\n    try {\n      // Set processing flag\n      if (isFeatureEnabled('IDEMPOTENCY_GUARD')) {\n        setOrderProcessing(ordineId, true);\n      }\n\n      // Atomic transaction simulation\n      if (isFeatureEnabled('INVENTORY_TX')) {\n        console.log('🔒 Inizio transazione atomica per ordine:', ordineId);\n      }\n\n      // Trova l'ordine prima di aggiornare lo stato (cerca solo in inviati)\n      const ordine = ordiniInviati.find(o => o.id === ordineId);\n      \n      if (!ordine) {\n        logAuditEvent('CONFERMA_RICEZIONE_ERROR', ordineId, { error: 'Ordine non trovato' });\n      }\n\n      // AGGIORNA LE GIACENZE REALI DEI VINI PRIMA DI ARCHIVIARE\n      if (ordine.dettagli) {\n        console.log('📦 Aggiornamento giacenze per ordine:', ordine);\n        \n        // Aggiorna le giacenze per ogni vino nell'ordine\n        for (const item of ordine.dettagli) {\n          const currentWine = wines.find(w => w.id === item.wineId);\n          if (currentWine) {\n            const currentInventory = currentWine.inventory || 0;\n            const bottlesToAdd = item.quantity * (item.unit === 'cartoni' ? 6 : 1);\n            const newInventory = currentInventory + bottlesToAdd;\n            \n            console.log(`📦 ${item.wineName}: ${currentInventory} + ${bottlesToAdd} = ${newInventory}`);\n            \n            // Aggiorna la giacenza nel database\n            await updateWineInventory(item.wineId, newInventory);\n          }\n        }\n        \n        // Log delle quantità per audit\n        const inventoryChanges = ordine.dettagli?.map(item => {\n          const currentWine = wines.find(w => w.id === item.wineId);\n          const currentInventory = currentWine?.inventory || 0;\n          const bottlesToAdd = item.quantity * (item.unit === 'cartoni' ? 6 : 1);\n          return {\n            wineId: item.wineId,\n            wineName: item.wineName,\n            quantityBefore: currentInventory,\n            quantityAfter: currentInventory + bottlesToAdd,\n            delta: bottlesToAdd\n          };\n        }) || [];\n\n        logAuditEvent('INVENTORY_UPDATE', ordineId, { \n          changes: inventoryChanges,\n          totalBottiglie: ordine.bottiglie,\n          totalValue: ordine.totale\n        });\n      }\n\n      // Aggiorna lo stato nel database\n      const success = await supabaseOrdini.aggiornaStatoOrdine(ordineId, 'archiviato');\n      \n      if (success) {\n        // Crea l'ordine completato\n        const ordineCompletato: Ordine = {\n          ...ordine,\n          stato: 'archiviato' // Stato finale per ordini completati\n        };\n        \n        // Aggiungi allo storico (archiviati)\n        setOrdiniStorico(prevStorico => {\n          // Controlla se l'ordine esiste già nello storico per evitare duplicazioni\n          const exists = prevStorico.some(o => o.id === ordineId);\n          if (exists) {\n            console.log('⚠️ Ordine già presente nello storico, evito duplicazione:', ordineId);\n            logAuditEvent('CONFERMA_RICEZIONE_DUPLICATE', ordineId, { warning: 'Ordine già archiviato' });\n            return prevStorico;\n          }\n          return [ordineCompletato, ...prevStorico];\n        });\n        \n        // Rimuovi dalla lista inviati (unica lista di origine ora)\n        setOrdiniInviati(prev => prev.filter(o => o.id !== ordineId));\n        console.log('📤 Ordine rimosso da inviati e spostato in archiviati:', ordineId);\n        \n        // Audit trail - success\n        logAuditEvent('CONFERMA_RICEZIONE_SUCCESS', ordineId, { \n          finalState: 'archiviato',\n          movedToStorico: true,\n          sourceList: 'inviati',\n          processingTime: Date.now()\n        });\n\n        if (isFeatureEnabled('INVENTORY_TX')) {\n          console.log('✅ Transazione atomica completata per ordine:', ordineId);\n        }\n      } else {\n        logAuditEvent('CONFERMA_RICEZIONE_ERROR', ordineId, { error: 'Aggiornamento database fallito' });\n      }\n    } catch (error) {\n      console.error('❌ Errore durante conferma ricezione:', error);\n      logAuditEvent('CONFERMA_RICEZIONE_ERROR', ordineId, { error: error.message });\n    } finally {\n      // Clear processing flag\n      if (isFeatureEnabled('IDEMPOTENCY_GUARD')) {\n        setOrderProcessing(ordineId, false);\n      }\n    }\n  };\n\n  const eliminaOrdineInviato = async (ordineId: string) => {\n    console.log('🗑️ Eliminando ordine inviato da Supabase:', ordineId);\n    \n    const success = await supabaseOrdini.eliminaOrdine(ordineId);\n    \n    if (success) {\n      setOrdiniInviati(prev => {\n        const ordine = prev.find(o => o.id === ordineId);\n        if (ordine) {\n          console.log('📋 Ordine inviato eliminato:', ordine.fornitore, '- €' + ordine.totale.toFixed(2));\n        }\n        return prev.filter(o => o.id !== ordineId);\n      });\n    }\n  };\n\n  // eliminaOrdineRicevuto rimossa - ordini ricevuti non esistono più\n\n  const eliminaOrdineStorico = async (ordineId: string) => {\n    console.log('🗑️ Eliminando ordine storico da Supabase:', ordineId);\n    \n    const success = await supabaseOrdini.eliminaOrdine(ordineId);\n    \n    if (success) {\n      setOrdiniStorico(prev => {\n        const ordine = prev.find(o => o.id === ordineId);\n        if (ordine) {\n          console.log('📋 Ordine storico eliminato:', ordine.fornitore, '- €' + ordine.totale.toFixed(2));\n        }\n        return prev.filter(o => o.id !== ordineId);\n      });\n    }\n  };\n\n  return (\n    <OrdiniContext.Provider value={{\n      ordiniInviati,\n      ordiniStorico,\n      loading,\n      aggiungiOrdine,\n      aggiornaStatoOrdine,\n      aggiornaQuantitaOrdine,\n      confermaRicezioneOrdine,\n      eliminaOrdineInviato,\n      eliminaOrdineStorico\n    }}>\n      {children}\n    </OrdiniContext.Provider>\n  );\n}\n\nexport function useOrdini() {\n  const context = useContext(OrdiniContext);\n  if (context === undefined) {\n    throw new Error('useOrdini must be used within an OrdiniProvider');\n  }\n  return context;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dero/Documents/winenode_main/src/data/wines.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/dero/Documents/winenode_main/src/hooks/useAutoSizeText.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/dero/Documents/winenode_main/src/hooks/useCarrelloOrdini.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/dero/Documents/winenode_main/src/hooks/useColumnResize.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/dero/Documents/winenode_main/src/hooks/useCreaOrdine.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/dero/Documents/winenode_main/src/hooks/useDebounce.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/dero/Documents/winenode_main/src/hooks/useFirstLaunch.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/dero/Documents/winenode_main/src/hooks/useNuovoOrdine 2.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/dero/Documents/winenode_main/src/hooks/useNuovoOrdine.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/dero/Documents/winenode_main/src/hooks/useOrdersPinGate.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/dero/Documents/winenode_main/src/hooks/useSupabaseOrdini.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/dero/Documents/winenode_main/src/hooks/useSuppliers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/dero/Documents/winenode_main/src/hooks/useTipologie.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/dero/Documents/winenode_main/src/hooks/useWineData 2.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/dero/Documents/winenode_main/src/hooks/useWineData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/dero/Documents/winenode_main/src/hooks/useWineSearch.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/dero/Documents/winenode_main/src/hooks/useWines.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/dero/Documents/winenode_main/src/lib/constants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/dero/Documents/winenode_main/src/lib/googleSheets.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/dero/Documents/winenode_main/src/lib/importFromGoogleSheet.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/dero/Documents/winenode_main/src/lib/supabase.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/dero/Documents/winenode_main/src/lib/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/dero/Documents/winenode_main/src/lib/wineProcessing.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/dero/Documents/winenode_main/src/main.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/dero/Documents/winenode_main/src/pages/CreaOrdinePage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/dero/Documents/winenode_main/src/pages/FoglioExcelPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/dero/Documents/winenode_main/src/pages/FornitoriPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/dero/Documents/winenode_main/src/pages/GestisciOrdiniPage.tsx","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Function 'GestisciOrdiniPage' has too many lines (846). Maximum allowed is 400.","line":19,"column":16,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":996,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { useNavigate, useSearchParams } from 'react-router-dom';\nimport { X, Package, Eye, Check, Trash2 } from 'lucide-react';\nimport { useOrdini, Ordine } from '../contexts/OrdiniContext';\nimport OrdineRicevutoCard from '../components/orders/OrdineRicevutoCard';\nimport ConfermaEliminazioneModal from '../components/modals/ConfermaEliminazioneModal';\nimport WhatsAppOrderModal from '../components/modals/WhatsAppOrderModal';\nimport { ORDINI_LABELS } from '../constants/ordiniLabels';\nimport { isFeatureEnabled } from '../config/featureFlags';\nimport QuantityPicker from '../components/QuantityPicker';\nimport GestisciOrdiniInventoryModal from '../components/GestisciOrdiniInventoryModal';\nimport SmartGestisciModal from '../components/modals/SmartGestisciModal';\nimport ConfirmArchiveModal from '../components/modals/ConfirmArchiveModal';\nimport { OrderDetail } from '../utils/buildWhatsAppMessage';\nimport '../styles/gestisci-ordini-mobile.css';\n\ntype TabType = 'inviati' | 'archiviati';\n\nexport default function GestisciOrdiniPage() {\n  const navigate = useNavigate();\n  const [searchParams] = useSearchParams();\n  const [activeTab, setActiveTab] = useState<TabType>('inviati');\n  const [expandedOrders, setExpandedOrders] = useState<Set<string>>(new Set());\n  const [managingOrders, setManagingOrders] = useState<Set<string>>(new Set());\n  const [modifiedQuantities, setModifiedQuantities] = useState<Record<string, Record<number, number>>>({});\n  const [showQuantityModal, setShowQuantityModal] = useState(false);\n  const [editingQuantity, setEditingQuantity] = useState<{ordineId: string, dettaglioIndex: number, currentValue: number, originalValue: number} | null>(null);\n  const [showSmartModal, setShowSmartModal] = useState(false);\n  const [smartModalOrdine, setSmartModalOrdine] = useState<Ordine | null>(null);\n  const [draftQuantities, setDraftQuantities] = useState<Record<string, Record<number, number>>>({});\n  const [showConfirmArchive, setShowConfirmArchive] = useState(false);\n  const [pendingArchiveOrder, setPendingArchiveOrder] = useState<{ordineId: string, quantities: Record<number, number>} | null>(null);\n  \n  // Stati per il modale WhatsApp\n  const [showWhatsAppModal, setShowWhatsAppModal] = useState(false);\n  const [whatsAppOrderDetails, setWhatsAppOrderDetails] = useState<OrderDetail[]>([]);\n  const [whatsAppSupplierName, setWhatsAppSupplierName] = useState<string>('');\n  \n  const {\n    ordiniInviati,\n    ordiniStorico,\n    loading,\n    aggiornaStatoOrdine,\n    aggiornaQuantitaOrdine,\n    confermaRicezioneOrdine,\n    eliminaOrdineInviato,\n    eliminaOrdineStorico\n  } = useOrdini();\n\n  // Stati per il modale di conferma eliminazione\n  const [showConfermaEliminazione, setShowConfermaEliminazione] = useState(false);\n  const [ordineToDelete, setOrdineToDelete] = useState<{\n    id: string;\n    ordine: Ordine;\n    tipo: 'inviato' | 'ricevuto' | 'storico';\n  } | null>(null);\n\n  // Gestisci tab da URL query\n  useEffect(() => {\n    const tabFromUrl = searchParams.get('tab') as TabType;\n    if (tabFromUrl && ['inviati', 'archiviati'].includes(tabFromUrl)) {\n      setActiveTab(tabFromUrl);\n    }\n  }, [searchParams]);\n\n  const handleClose = () => {\n    navigate('/');\n  };\n\n  const handleVisualizza = (ordineId: string) => {\n    console.log('👁️ Visualizza ordine:', ordineId);\n    // TODO: Implementare visualizzazione dettagli ordine\n  };\n\n  const handleConfermaOrdine = async (ordineId: string) => {\n    console.log('✅ Conferma ordine con aggiornamento giacenze:', ordineId);\n    \n    // Conferma diretta con aggiornamento giacenze (sempre attiva)\n    await confermaRicezioneOrdine(ordineId);\n  };\n\n  const handleConfermaRicezione = async (ordineId: string) => {\n    console.log('📦 Conferma ricezione ordine:', ordineId);\n    await confermaRicezioneOrdine(ordineId);\n  };\n\n  const handleEliminaOrdineInviato = (ordineId: string, ordine: Ordine) => {\n    setOrdineToDelete({ id: ordineId, ordine, tipo: 'inviato' });\n    setShowConfermaEliminazione(true);\n  };\n\n  // handleEliminaOrdineRicevuto rimossa - ordini ricevuti non esistono più\n\n  const handleEliminaOrdineStorico = (ordineId: string, ordine: Ordine) => {\n    setOrdineToDelete({ id: ordineId, ordine, tipo: 'storico' });\n    setShowConfermaEliminazione(true);\n  };\n\n  const handleToggleExpanded = (ordineId: string) => {\n    setExpandedOrders(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(ordineId)) {\n        newSet.delete(ordineId);\n      } else {\n        newSet.add(ordineId);\n      }\n      return newSet;\n    });\n  };\n\n  const handleToggleManaging = (ordineId: string) => {\n    if (!isFeatureEnabled('CREATI_INLINE_GESTISCI')) return;\n    \n    setManagingOrders(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(ordineId)) {\n        newSet.delete(ordineId);\n        // Reset quantità modificate quando si chiude la gestione\n        setModifiedQuantities(prevMod => {\n          const newMod = { ...prevMod };\n          delete newMod[ordineId];\n          return newMod;\n        });\n      } else {\n        newSet.add(ordineId);\n        // Inizializza quantità con valori originali\n        const ordine = ordiniInviati.find(o => o.id === ordineId);\n        if (ordine && ordine.dettagli) {\n          setModifiedQuantities(prevMod => ({\n            ...prevMod,\n            [ordineId]: ordine.dettagli!.reduce((acc, dettaglio, index) => {\n              acc[index] = dettaglio.quantity;\n              return acc;\n            }, {} as Record<number, number>)\n          }));\n        }\n      }\n      return newSet;\n    });\n  };\n\n  const handleQuantityChange = (ordineId: string, dettaglioIndex: number, newQuantity: number) => {\n    setModifiedQuantities(prev => ({\n      ...prev,\n      [ordineId]: {\n        ...prev[ordineId],\n        [dettaglioIndex]: newQuantity\n      }\n    }));\n  };\n\n  const handleOpenQuantityModal = (ordineId: string, dettaglioIndex: number) => {\n    const ordine = ordiniInviati.find(o => o.id === ordineId);\n    if (!ordine || !ordine.dettagli || !ordine.dettagli[dettaglioIndex]) return;\n\n    const originalValue = ordine.dettagli[dettaglioIndex].quantity;\n    // Usa draftQuantities se disponibile, altrimenti modifiedQuantities, altrimenti originale\n    const currentValue = isFeatureEnabled('QTY_MODAL_PERSIST_COMMIT') \n      ? (draftQuantities[ordineId]?.[dettaglioIndex] ?? modifiedQuantities[ordineId]?.[dettaglioIndex] ?? originalValue)\n      : (modifiedQuantities[ordineId]?.[dettaglioIndex] ?? originalValue);\n\n    setEditingQuantity({\n      ordineId,\n      dettaglioIndex,\n      currentValue,\n      originalValue\n    });\n    setShowQuantityModal(true);\n  };\n\n  const handleCloseQuantityModal = () => {\n    setShowQuantityModal(false);\n    setEditingQuantity(null);\n  };\n\n  const handleConfirmQuantityModal = (newQuantity: number) => {\n    if (!editingQuantity) return;\n\n    if (isFeatureEnabled('QTY_MODAL_PERSIST_COMMIT')) {\n      // Commit del draft: salva in draftQuantities per persistenza\n      setDraftQuantities(prev => ({\n        ...prev,\n        [editingQuantity.ordineId]: {\n          ...prev[editingQuantity.ordineId],\n          [editingQuantity.dettaglioIndex]: newQuantity\n        }\n      }));\n\n      // AGGIORNA LE QUANTITÀ REALI NELL'ORDINE\n      const ordine = ordiniInviati.find(o => o.id === editingQuantity.ordineId);\n      if (ordine && ordine.dettagli) {\n        const dettagliAggiornati = ordine.dettagli.map((dettaglio, index) => {\n          if (index === editingQuantity.dettaglioIndex) {\n            return {\n              ...dettaglio,\n              quantity: newQuantity,\n              totalPrice: newQuantity * dettaglio.unitPrice\n            };\n          }\n          return dettaglio;\n        });\n        \n        // Aggiorna l'ordine nel context\n        aggiornaQuantitaOrdine(editingQuantity.ordineId, dettagliAggiornati);\n        console.log('✅ Quantità aggiornata:', newQuantity);\n      }\n\n      // Se abilitato il flusso di archiviazione, mostra dialog\n      if (isFeatureEnabled('QTY_MODAL_CONFIRM_ARCHIVE_FLOW')) {\n        const ordine = ordiniInviati.find(o => o.id === editingQuantity.ordineId);\n        if (ordine && ordine.dettagli) {\n          // Prepara le quantità per l'archiviazione\n          const quantities = ordine.dettagli.reduce((acc, _, index) => {\n            acc[index] = index === editingQuantity.dettaglioIndex \n              ? newQuantity \n              : (draftQuantities[editingQuantity.ordineId]?.[index] ?? ordine.dettagli![index].quantity);\n            return acc;\n          }, {} as Record<number, number>);\n\n          setPendingArchiveOrder({\n            ordineId: editingQuantity.ordineId,\n            quantities\n          });\n          setShowConfirmArchive(true);\n        }\n      }\n    } else {\n      // Comportamento legacy\n      handleQuantityChange(editingQuantity.ordineId, editingQuantity.dettaglioIndex, newQuantity);\n    }\n\n    handleCloseQuantityModal();\n  };\n\n  const handleOpenSmartModal = (ordine: Ordine) => {\n    if (!isFeatureEnabled('CREATI_SMART_FULL_MODAL')) return;\n    \n    setSmartModalOrdine(ordine);\n    setShowSmartModal(true);\n  };\n\n  const handleCloseSmartModal = () => {\n    setShowSmartModal(false);\n    setSmartModalOrdine(null);\n  };\n\n  const handleSmartModalConfirm = (modifiedQuantities: Record<number, number>) => {\n    if (!smartModalOrdine || !smartModalOrdine.dettagli) return;\n\n    // Aggiorna le quantità nell'ordine\n    const dettagliAggiornati = smartModalOrdine.dettagli.map((dettaglio, index) => {\n      const newQuantity = modifiedQuantities[index] ?? dettaglio.quantity;\n      return {\n        ...dettaglio,\n        quantity: newQuantity,\n        totalPrice: newQuantity * dettaglio.unitPrice\n      };\n    });\n\n    // Aggiorna l'ordine nel context\n    aggiornaQuantitaOrdine(smartModalOrdine.id, dettagliAggiornati);\n\n    console.log('✅ Quantità aggiornate tramite Smart Modal');\n  };\n\n  const handleSmartModalArchive = async (modifiedQuantities: Record<number, number>) => {\n    if (!smartModalOrdine || !smartModalOrdine.dettagli) return;\n\n    try {\n      // Prepara i dettagli aggiornati con le quantità modificate\n      const dettagliAggiornati = smartModalOrdine.dettagli.map((dettaglio, index) => {\n        const newQuantity = modifiedQuantities[index] ?? dettaglio.quantity;\n        return {\n          ...dettaglio,\n          quantity: newQuantity,\n          totalPrice: newQuantity * dettaglio.unitPrice\n        };\n      });\n\n      // Prima aggiorna le quantità, poi conferma ricezione (logica atomica Fase 3)\n      aggiornaQuantitaOrdine(smartModalOrdine.id, dettagliAggiornati);\n      await confermaRicezioneOrdine(smartModalOrdine.id);\n\n      // Switch al tab Archiviati\n      setActiveTab('archiviati');\n\n      console.log('✅ Ordine archiviato con successo tramite Smart Modal');\n    } catch (error) {\n      console.error('❌ Errore durante archiviazione Smart Modal:', error);\n    }\n  };\n\n  const handleConfirmArchive = async () => {\n    if (!pendingArchiveOrder) return;\n\n    const ordine = ordiniInviati.find(o => o.id === pendingArchiveOrder.ordineId);\n    if (!ordine || !ordine.dettagli) return;\n\n    try {\n      // Prepara i dettagli aggiornati con le quantità committate\n      const dettagliAggiornati = ordine.dettagli.map((dettaglio, index) => {\n        const newQuantity = pendingArchiveOrder.quantities[index] ?? dettaglio.quantity;\n        return {\n          ...dettaglio,\n          quantity: newQuantity,\n          totalPrice: newQuantity * dettaglio.unitPrice\n        };\n      });\n\n      // Prima aggiorna le quantità, poi conferma ricezione (logica atomica Fase 3)\n      aggiornaQuantitaOrdine(pendingArchiveOrder.ordineId, dettagliAggiornati);\n      await confermaRicezioneOrdine(pendingArchiveOrder.ordineId);\n\n      // Pulisci gli stati\n      setDraftQuantities(prev => {\n        const newDrafts = { ...prev };\n        delete newDrafts[pendingArchiveOrder.ordineId];\n        return newDrafts;\n      });\n\n      // Chiudi dialog e switch al tab Archiviati\n      setShowConfirmArchive(false);\n      setPendingArchiveOrder(null);\n      setActiveTab('archiviati');\n\n      console.log('✅ Ordine archiviato con successo');\n    } catch (error) {\n      console.error('❌ Errore durante archiviazione:', error);\n    }\n  };\n\n  const handleCancelArchive = () => {\n    setShowConfirmArchive(false);\n    setPendingArchiveOrder(null);\n  };\n\n  const handleOpenWhatsAppModal = (ordine: Ordine) => {\n    if (!ordine.dettagli) return;\n    \n    // Converte i dettagli ordine nel formato richiesto dal modale WhatsApp\n    const orderDetails: OrderDetail[] = ordine.dettagli.map(dettaglio => ({\n      wineName: dettaglio.wineName,\n      vintage: undefined, // OrdineDettaglio non ha vintage, sarà undefined\n      quantity: dettaglio.quantity,\n      unit: dettaglio.unit as 'bottiglie' | 'cartoni'\n    }));\n    \n    setWhatsAppOrderDetails(orderDetails);\n    setWhatsAppSupplierName(ordine.fornitore);\n    setShowWhatsAppModal(true);\n  };\n\n  const handleCloseWhatsAppModal = () => {\n    setShowWhatsAppModal(false);\n    setWhatsAppOrderDetails([]);\n    setWhatsAppSupplierName('');\n  };\n\n\n  const handleConfermaModifiche = async (ordineId: string) => {\n    const ordine = ordiniInviati.find(o => o.id === ordineId);\n    if (!ordine || !ordine.dettagli) return;\n\n    try {\n      // Prepara i dettagli aggiornati con le quantità modificate\n      const dettagliAggiornati = ordine.dettagli.map((dettaglio, index) => {\n        const newQuantity = modifiedQuantities[ordineId]?.[index] ?? dettaglio.quantity;\n        return {\n          ...dettaglio,\n          quantity: newQuantity,\n          totalPrice: newQuantity * dettaglio.unitPrice\n        };\n      });\n\n      // Aggiorna l'ordine nel context\n      aggiornaQuantitaOrdine(ordineId, dettagliAggiornati);\n\n      // Conferma ricezione con logica atomica (riusa Fase 3)\n      await confermaRicezioneOrdine(ordineId);\n\n      // Chiudi la modalità gestione\n      handleToggleManaging(ordineId);\n\n      console.log('✅ Quantità confermate e ordine archiviato con successo');\n    } catch (error) {\n      console.error('❌ Errore durante la conferma delle modifiche:', error);\n    }\n  };\n\n  const confermaEliminazione = () => {\n    if (!ordineToDelete) return;\n\n    switch (ordineToDelete.tipo) {\n      case 'inviato':\n        eliminaOrdineInviato(ordineToDelete.id);\n        break;\n      case 'ricevuto':\n        // eliminaOrdineRicevuto rimossa - non più necessaria\n        break;\n      case 'storico':\n        eliminaOrdineStorico(ordineToDelete.id);\n        break;\n    }\n\n    setOrdineToDelete(null);\n  };\n\n  const getMessaggioEliminazione = () => {\n    if (!ordineToDelete) return '';\n    \n    switch (ordineToDelete.tipo) {\n      case 'inviato':\n        return ORDINI_LABELS.eliminazione.creato;\n      case 'ricevuto':\n        return ORDINI_LABELS.eliminazione.archiviato;\n      case 'storico':\n        return ORDINI_LABELS.eliminazione.archiviato;\n      default:\n        return '';\n    }\n  };\n\n  const getTabCount = (tab: TabType) => {\n    switch (tab) {\n      case 'inviati':\n        return ordiniInviati.length;\n      case 'archiviati':\n        // Tab \"Ordini Archiviati\" conta ordini completati (storico)\n        return ordiniStorico.length;\n      default:\n        return 0;\n    }\n  };\n\n  const getCurrentTabData = () => {\n    switch (activeTab) {\n      case 'inviati':\n        return ordiniInviati;\n      case 'archiviati':\n        // Tab \"Ordini Archiviati\" mostra ordini completati (storico)\n        return ordiniStorico;\n      default:\n        return [];\n    }\n  };\n\n  const getEmptyMessage = () => {\n    switch (activeTab) {\n      case 'inviati':\n        return {\n          title: ORDINI_LABELS.emptyState.creati.title,\n          subtitle: ORDINI_LABELS.emptyState.creati.subtitle\n        };\n      case 'archiviati':\n        return {\n          title: ORDINI_LABELS.emptyState.archiviati.title,\n          subtitle: ORDINI_LABELS.emptyState.archiviati.subtitle\n        };\n      default:\n        return {\n          title: ORDINI_LABELS.emptyState.default.title,\n          subtitle: ORDINI_LABELS.emptyState.default.subtitle\n        };\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-app-bg flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-app-accent\"></div>\n      </div>\n    );\n  }\n\n  const currentData = getCurrentTabData();\n  const emptyMessage = getEmptyMessage();\n\n  return (\n    <div className=\"homepage-container\" style={{ \n      width: '100vw',\n      height: '100dvh', /* Dynamic viewport height per iOS Safari */\n      maxWidth: '100%',\n      overflow: 'hidden',\n      position: 'relative',\n      background: '#fff9dc'\n    }}>\n      {/* HEADER FISSO CON LOGO */}\n      <header className=\"mobile-header\">\n        <div className=\"header-content\">\n          <div className=\"logo-wrap\">\n            <picture>\n              <source type=\"image/webp\" srcSet=\"/logo1.webp\" />\n              <img \n                src=\"/logo1.png\" \n                alt=\"WINENODE\"\n                loading=\"eager\"\n              />\n            </picture>\n          </div>\n        </div>\n      </header>\n\n      {/* CONTENT SCROLLABILE */}\n      <main className=\"mobile-content\">\n        <div className=\"gestisci-ordini-page-content\" style={{\n          height: '100%',\n          overflow: 'hidden',\n          display: 'flex',\n          flexDirection: 'column'\n        }}>\n          \n          {/* Titolo e Pulsante Chiudi */}\n          <div className=\"gestisci-ordini-header-section\" style={{\n            flexShrink: 0,\n            padding: '16px',\n            borderBottom: '1px solid #e2d6aa',\n            background: '#fff9dc'\n          }}>\n            <div className=\"flex items-center justify-between\">\n              <h1 className=\"text-lg font-bold\" style={{ color: '#541111' }}>\n                {ORDINI_LABELS.header.titoloPagina}\n              </h1>\n              <button\n                onClick={handleClose}\n                className=\"gestisci-ordini-button\"\n                style={{ \n                  color: '#541111',\n                  background: 'transparent',\n                  minWidth: '44px',\n                  minHeight: '44px',\n                  padding: '10px'\n                }}\n              >\n                <X className=\"h-5 w-5\" />\n              </button>\n            </div>\n          </div>\n\n          {/* Tabs Fissi */}\n          <div className=\"gestisci-ordini-tabs\" style={{\n            flexShrink: 0,\n            padding: '16px 16px 0 16px',\n            background: '#fff9dc'\n          }}>\n        <div className=\"flex gap-2 mb-6 flex-nowrap\">\n          <button\n            onClick={() => setActiveTab('inviati')}\n            className=\"flex items-center justify-center gap-1 px-3 py-2 rounded-lg font-medium transition-colors flex-1 whitespace-nowrap\"\n            style={{\n              background: activeTab === 'inviati' ? '#d4a300' : 'transparent',\n              color: activeTab === 'inviati' ? '#fff9dc' : '#541111',\n              border: activeTab === 'inviati' ? 'none' : '1px solid #e2d6aa'\n            }}\n          >\n            {ORDINI_LABELS.tabs.creati} ({getTabCount('inviati')})\n          </button>\n          \n          <button\n            onClick={() => setActiveTab('archiviati')}\n            className=\"flex items-center justify-center gap-1 px-3 py-2 rounded-lg font-medium transition-colors flex-1 whitespace-nowrap\"\n            style={{\n              background: activeTab === 'archiviati' ? '#d4a300' : 'transparent',\n              color: activeTab === 'archiviati' ? '#fff9dc' : '#541111',\n              border: activeTab === 'archiviati' ? 'none' : '1px solid #e2d6aa'\n            }}\n          >\n            {ORDINI_LABELS.tabs.archiviati} ({getTabCount('archiviati')})\n          </button>\n        </div>\n      </div>\n\n          {/* Content Scrollabile */}\n          <div className=\"gestisci-ordini-content-scroll\" style={{\n            flex: 1,\n            overflowY: 'auto',\n            overflowX: 'hidden',\n            WebkitOverflowScrolling: 'touch',\n            overscrollBehavior: 'contain',\n            padding: '0 16px',\n            paddingBottom: 'max(env(safe-area-inset-bottom), 0px) + 16px'\n          }}>\n            {currentData.length === 0 ? (\n              <div className=\"gestisci-ordini-empty\" style={{\n                display: 'flex',\n                flexDirection: 'column',\n                alignItems: 'center',\n                justifyContent: 'center',\n                height: '100%',\n                textAlign: 'center',\n                padding: '32px 16px'\n              }}>\n                <Package \n                  className=\"h-16 w-16 mb-4 opacity-30\"\n                  style={{ color: '#7a4a30' }}\n                />\n                <h3 className=\"text-lg font-semibold mb-2\" style={{ color: '#541111' }}>\n                  {emptyMessage.title}\n                </h3>\n                <p className=\"text-sm\" style={{ color: '#7a4a30' }}>\n                  {emptyMessage.subtitle}\n                </p>\n              </div>\n            ) : (\n              <div className=\"gestisci-ordini-list\" style={{\n                padding: '8px 0',\n                gap: '12px',\n                display: 'flex',\n                flexDirection: 'column'\n              }}>\n            {currentData.map((ordine) => {\n              // Usa componente specializzato per ordini archiviati\n              if (activeTab === 'archiviati') {\n                return (\n                  <OrdineRicevutoCard\n                    key={ordine.id}\n                    ordine={ordine}\n                    onVisualizza={handleVisualizza}\n                    onConfermaRicezione={handleConfermaRicezione}\n                    onElimina={handleEliminaOrdineStorico}\n                    onAggiornaQuantita={aggiornaQuantitaOrdine}\n                  />\n                );\n              }\n\n              // Layout standard per inviati e storico\n              return (\n                <div\n                  key={ordine.id}\n                  className=\"gestisci-ordini-card cursor-pointer\"\n                  onClick={() => handleToggleExpanded(ordine.id)}\n                >\n                  {/* Header con fornitore e badge */}\n                  <div className=\"flex justify-between items-start mb-3\">\n                    <div className=\"flex items-center gap-2\">\n                      <h4 className=\"font-bold text-base\" style={{ color: '#541111' }}>\n                        {ordine.fornitore}\n                      </h4>\n                    </div>\n                    {activeTab === 'inviati' && (\n                      <div className=\"flex items-center gap-2\">\n                        {/* Pulsante WhatsApp */}\n                        <button\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            handleOpenWhatsAppModal(ordine);\n                          }}\n                          className=\"flex items-center justify-center rounded transition-colors hover:bg-black/5\"\n                          style={{ \n                            width: '28px', \n                            height: '28px',\n                            padding: '4px'\n                          }}\n                          aria-label=\"Invia ordine via WhatsApp\"\n                        >\n                          <img \n                            src=\"/whatsapp.png\" \n                            alt=\"WhatsApp\" \n                            className=\"w-5 h-5\"\n                            style={{ filter: 'none' }}\n                          />\n                        </button>\n                        \n                        {/* Badge CREATO */}\n                        <span \n                          className=\"px-2 py-1 rounded text-xs font-medium\"\n                          style={{ background: '#16a34a', color: '#fff9dc' }}\n                        >\n                          {ORDINI_LABELS.badges.creato}\n                        </span>\n                      </div>\n                    )}\n                  </div>\n\n                  {/* Dettagli ordine */}\n                  <div className=\"grid grid-cols-2 gap-4 mb-3 text-xs\" style={{ color: '#7a4a30' }}>\n                    <div>\n                      <span className=\"block font-medium\">{ORDINI_LABELS.dettagli.ordinato}</span>\n                      <span className=\"font-bold\">{ordine.data}</span>\n                    </div>\n                    <div>\n                      <span className=\"block font-medium\">{ORDINI_LABELS.dettagli.totale}</span>\n                      <span className=\"font-bold\" style={{ color: '#7a4a30' }}>\n                        €{ordine.totale.toFixed(2)}\n                      </span>\n                    </div>\n                  </div>\n\n                  {/* Box dettagli espandibile per ordini creati */}\n                  {activeTab === 'inviati' && expandedOrders.has(ordine.id) && ordine.dettagli && (\n                    <div \n                      className=\"mb-4 p-3 rounded border-t\"\n                      style={{ borderColor: '#e2d6aa', background: 'white' }}\n                    >\n                      <div className=\"space-y-2\">\n                        {ordine.dettagli.map((dettaglio, index) => {\n                          const isCompactMode = isFeatureEnabled('CREATI_SMART_FULL_MODAL');\n                          // Usa draftQuantities se disponibile per persistenza\n                          const displayQuantity = isFeatureEnabled('QTY_MODAL_PERSIST_COMMIT')\n                            ? (draftQuantities[ordine.id]?.[index] ?? dettaglio.quantity)\n                            : dettaglio.quantity;\n                          const displayTotalPrice = displayQuantity * dettaglio.unitPrice;\n                          \n                          return (\n                            <div key={index} className={`flex items-center justify-between text-xs ${isCompactMode ? 'py-1' : ''}`}>\n                              <div className=\"flex-1 min-w-0\">\n                                {/* Riga 1: Nome vino (compatto con ellipsis) */}\n                                <div className={`font-medium ${isCompactMode ? 'truncate' : ''}`} style={{ color: '#541111' }}>\n                                  {dettaglio.wineName}\n                                </div>\n                                \n                                {/* Riga 2: Meta info compatta */}\n                                <div className={`${isCompactMode ? 'text-xs whitespace-nowrap' : ''}`} style={{ color: '#7a4a30' }}>\n                                  {isCompactMode ? (\n                                    `${dettaglio.unit} • ${displayQuantity} • €${dettaglio.unitPrice.toFixed(2)}/cad • €${displayTotalPrice.toFixed(2)}`\n                                  ) : (\n                                    `${displayQuantity} ${dettaglio.unit} - €${displayTotalPrice.toFixed(2)} (€${dettaglio.unitPrice.toFixed(2)}/cad)`\n                                  )}\n                                </div>\n                              </div>\n\n                              {/* Quantità cliccabile per aprire modale */}\n                              {isFeatureEnabled('CREATI_QTY_MODAL') && (\n                                <div\n                                  onClick={(e) => {\n                                    e.stopPropagation();\n                                    handleOpenQuantityModal(ordine.id, index);\n                                  }}\n                                  className=\"ml-3 px-3 py-1 rounded border cursor-pointer transition-all duration-200 hover:bg-gray-50 flex-shrink-0\"\n                                  style={{ \n                                    borderColor: '#e2d6aa',\n                                    background: 'white'\n                                  }}\n                                >\n                                  <span className=\"text-sm font-bold\" style={{ color: '#541111' }}>\n                                    {displayQuantity}\n                                  </span>\n                                </div>\n                              )}\n                            </div>\n                          );\n                        })}\n                      </div>\n                    </div>\n                  )}\n\n                  {/* Sezione gestione inline per ordini creati */}\n                  {activeTab === 'inviati' && managingOrders.has(ordine.id) && ordine.dettagli && (\n                    <div \n                      className=\"mb-4 p-4 rounded border-t\"\n                      style={{ borderColor: '#e2d6aa', background: '#f9f9f9' }}\n                    >\n                      <h5 className=\"text-sm font-medium mb-3\" style={{ color: '#541111' }}>\n                        {ORDINI_LABELS.gestioneInline.titolo}\n                      </h5>\n\n                      {/* Tabella gestione quantità */}\n                      <div className=\"space-y-3\">\n                        {ordine.dettagli.map((dettaglio, index) => {\n                          const currentQuantity = modifiedQuantities[ordine.id]?.[index] ?? dettaglio.quantity;\n                          const maxQuantity = dettaglio.quantity; // Limite massimo = quantità ordinata\n                          \n                          return (\n                            <div key={index} className=\"bg-white p-3 rounded border\" style={{ borderColor: '#e2d6aa' }}>\n                              <div className=\"grid grid-cols-1 gap-3 md:grid-cols-3 md:items-center\">\n                                {/* Prodotto */}\n                                <div>\n                                  <div className=\"text-xs font-medium mb-1\" style={{ color: '#7a4a30' }}>\n                                    {ORDINI_LABELS.gestioneInline.colonne.prodotto}\n                                  </div>\n                                  <div className=\"text-sm font-medium\" style={{ color: '#541111' }}>\n                                    {dettaglio.wineName}\n                                  </div>\n                                </div>\n\n                                {/* Unità */}\n                                <div>\n                                  <div className=\"text-xs font-medium mb-1\" style={{ color: '#7a4a30' }}>\n                                    {ORDINI_LABELS.gestioneInline.colonne.unita}\n                                  </div>\n                                  <div className=\"text-sm\" style={{ color: '#7a4a30' }}>\n                                    {dettaglio.unit}\n                                  </div>\n                                </div>\n\n                                {/* Modifica quantità */}\n                                <div>\n                                  <div className=\"text-xs font-medium mb-2\" style={{ color: '#7a4a30' }}>\n                                    {ORDINI_LABELS.gestioneInline.colonne.modificaQuantita}\n                                  </div>\n                                  {isFeatureEnabled('CREATI_QTY_MODAL') ? (\n                                    <div\n                                      onClick={() => handleOpenQuantityModal(ordine.id, index)}\n                                      className=\"inline-flex items-center justify-center px-4 py-2 rounded border cursor-pointer transition-all duration-200 hover:bg-gray-50\"\n                                      style={{ \n                                        borderColor: '#e2d6aa',\n                                        background: 'white',\n                                        minWidth: '60px'\n                                      }}\n                                    >\n                                      <span className=\"text-sm font-bold\" style={{ color: '#541111' }}>\n                                        {currentQuantity}\n                                      </span>\n                                    </div>\n                                  ) : (\n                                    <QuantityPicker\n                                      value={currentQuantity}\n                                      onChange={(newQuantity) => handleQuantityChange(ordine.id, index, newQuantity)}\n                                      min={0}\n                                      max={maxQuantity}\n                                    />\n                                  )}\n                                </div>\n                              </div>\n                            </div>\n                          );\n                        })}\n                      </div>\n\n                      {/* Riepilogo */}\n                      {(() => {\n                        const totalConfermato = ordine.dettagli.reduce((acc, dettaglio, index) => {\n                          const quantity = modifiedQuantities[ordine.id]?.[index] ?? dettaglio.quantity;\n                          return acc + quantity;\n                        }, 0);\n                        \n                        const valoreConfermato = ordine.dettagli.reduce((acc, dettaglio, index) => {\n                          const quantity = modifiedQuantities[ordine.id]?.[index] ?? dettaglio.quantity;\n                          return acc + (quantity * dettaglio.unitPrice);\n                        }, 0);\n\n                        return (\n                          <div className=\"mt-4 p-3 bg-white rounded border\" style={{ borderColor: '#e2d6aa' }}>\n                            <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                              <div>\n                                <span className=\"font-medium\" style={{ color: '#7a4a30' }}>\n                                  {ORDINI_LABELS.gestioneInline.riepilogo.totaleConfermato}\n                                </span>\n                                <span className=\"ml-2 font-bold\" style={{ color: '#541111' }}>\n                                  {totalConfermato}\n                                </span>\n                              </div>\n                              <div>\n                                <span className=\"font-medium\" style={{ color: '#7a4a30' }}>\n                                  {ORDINI_LABELS.gestioneInline.riepilogo.valoreConfermato}\n                                </span>\n                                <span className=\"ml-2 font-bold\" style={{ color: '#541111' }}>\n                                  €{valoreConfermato.toFixed(2)}\n                                </span>\n                              </div>\n                            </div>\n                          </div>\n                        );\n                      })()}\n\n                      {/* Pulsanti azione gestione */}\n                      <div className=\"flex gap-2 mt-4\">\n                        <button\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            handleConfermaModifiche(ordine.id);\n                          }}\n                          className=\"flex-1 flex items-center justify-center gap-1 px-3 py-2 rounded text-xs font-medium transition-colors\"\n                          style={{ \n                            background: '#16a34a', \n                            color: '#fff9dc'\n                          }}\n                        >\n                          <Check className=\"h-3 w-3\" />\n                          {ORDINI_LABELS.gestioneInline.azioni.confermaModifiche}\n                        </button>\n                        <button\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            handleToggleManaging(ordine.id);\n                          }}\n                          className=\"flex-1 flex items-center justify-center gap-1 px-3 py-2 rounded text-xs font-medium transition-colors\"\n                          style={{ \n                            background: '#6b7280', \n                            color: '#fff9dc'\n                          }}\n                        >\n                          {ORDINI_LABELS.gestioneInline.azioni.annulla}\n                        </button>\n                      </div>\n                    </div>\n                  )}\n\n                  {/* Pulsanti azione per tab Inviati */}\n                  {activeTab === 'inviati' && (\n                    <div className=\"flex gap-2 pt-2 border-t\" style={{ borderColor: '#e2d6aa' }}>\n                      <button\n                        onClick={(e) => { \n                          e.stopPropagation(); \n                          if (isFeatureEnabled('CREATI_SMART_FULL_MODAL')) {\n                            handleOpenSmartModal(ordine);\n                          } else if (isFeatureEnabled('CREATI_INLINE_GESTISCI')) {\n                            handleToggleManaging(ordine.id);\n                          } else {\n                            handleConfermaOrdine(ordine.id);\n                          }\n                        }}\n                        className=\"flex-1 flex items-center justify-center gap-1 px-3 py-2 rounded text-xs font-medium transition-colors\"\n                        style={{ \n                          background: '#d4a300', \n                          color: '#fff9dc'\n                        }}\n                      >\n                        <Check className=\"h-3 w-3\" />\n                        {ORDINI_LABELS.azioni.conferma}\n                      </button>\n                      <button\n                        onClick={(e) => { e.stopPropagation(); handleEliminaOrdineInviato(ordine.id, ordine); }}\n                        className=\"flex-1 flex items-center justify-center gap-1 px-3 py-2 rounded text-xs font-medium transition-colors\"\n                        style={{ \n                          background: '#dc2626', \n                          color: '#fff9dc'\n                        }}\n                      >\n                        <Trash2 className=\"h-3 w-3\" />\n                        {ORDINI_LABELS.azioni.elimina}\n                      </button>\n                    </div>\n                  )}\n\n                  {/* Layout per storico rimosso - tab eliminato */}\n                </div>\n              );\n            })}\n              </div>\n            )}\n          </div>\n        </div>\n      </main>\n\n      {/* Modale Conferma Eliminazione */}\n      <ConfermaEliminazioneModal\n        isOpen={showConfermaEliminazione}\n        onOpenChange={setShowConfermaEliminazione}\n        onConfirm={confermaEliminazione}\n        titolo={ORDINI_LABELS.header.modaleTitolo}\n        messaggio={getMessaggioEliminazione()}\n        dettagliOrdine={ordineToDelete ? {\n          fornitore: ordineToDelete.ordine.fornitore,\n          totale: ordineToDelete.ordine.totale,\n          data: ordineToDelete.ordine.data\n        } : undefined}\n      />\n\n      {/* Modale Modifica Quantità - Gestione Ordini */}\n      <GestisciOrdiniInventoryModal\n        isOpen={showQuantityModal}\n        initialValue={editingQuantity?.currentValue || 0}\n        onConfirm={handleConfirmQuantityModal}\n        onCancel={handleCloseQuantityModal}\n        min={0}\n        max={100}\n        originalValue={editingQuantity?.originalValue}\n      />\n\n      {/* Modale Smart Gestisci */}\n      {smartModalOrdine && (\n        <SmartGestisciModal\n          isOpen={showSmartModal}\n          onClose={handleCloseSmartModal}\n          onConfirm={handleSmartModalConfirm}\n          onArchive={handleSmartModalArchive}\n          ordineId={smartModalOrdine.id}\n          fornitore={smartModalOrdine.fornitore}\n          dettagli={smartModalOrdine.dettagli || []}\n        />\n      )}\n\n      {/* Dialog Conferma Archiviazione */}\n      <ConfirmArchiveModal\n        isOpen={showConfirmArchive}\n        onConfirm={handleConfirmArchive}\n        onCancel={handleCancelArchive}\n        fornitore={pendingArchiveOrder ? ordiniInviati.find(o => o.id === pendingArchiveOrder.ordineId)?.fornitore : undefined}\n        totalItems={pendingArchiveOrder ? Object.values(pendingArchiveOrder.quantities).reduce((sum, qty) => sum + qty, 0) : undefined}\n        totalValue={pendingArchiveOrder ? Object.entries(pendingArchiveOrder.quantities).reduce((sum, [index, qty]) => {\n          const ordine = ordiniInviati.find(o => o.id === pendingArchiveOrder.ordineId);\n          const dettaglio = ordine?.dettagli?.[parseInt(index)];\n          return sum + (qty * (dettaglio?.unitPrice || 0));\n        }, 0) : undefined}\n      />\n\n      {/* Modale WhatsApp */}\n      <WhatsAppOrderModal\n        isOpen={showWhatsAppModal}\n        onClose={handleCloseWhatsAppModal}\n        orderDetails={whatsAppOrderDetails}\n        supplierName={whatsAppSupplierName}\n      />\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dero/Documents/winenode_main/src/pages/HomePage.tsx","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Function 'HomePage' has too many lines (476). Maximum allowed is 400.","line":27,"column":16,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":576,"endColumn":2},{"ruleId":"complexity","severity":1,"message":"Function 'HomePage' has a complexity of 34. Maximum allowed is 30.","line":27,"column":16,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":576,"endColumn":2},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 33. Maximum allowed is 30.","line":118,"column":13,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":148,"endColumn":4}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\nimport { Filter, Plus, Database, AlertTriangle, X } from 'lucide-react';\nimport { useNavigate } from 'react-router-dom';\nimport PhosphorCart from '~icons/ph/shopping-cart-light';\nimport PhosphorFunnel from '~icons/ph/funnel-light';\nimport PhosphorBell from '~icons/ph/bell-light';\nimport PhosphorMagnifyingGlass from '~icons/ph/magnifying-glass-light';\nimport FilterModal from '../components/FilterModal';\nimport WineDetailsModal from '../components/WineDetailsModal';\nimport HomeInventoryModal from '../components/HomeInventoryModal';\nimport CarrelloOrdiniModal from '../components/modals/CarrelloOrdiniModal';\nimport NuovoOrdineModal from '../components/modals/NuovoOrdineModal';\nimport { WineSearchBar } from '../components/search/WineSearchBar';\nimport OrdersPinModal from '../components/security/OrdersPinModal';\n\nimport useWines from '../hooks/useWines';\nimport { useAutoSizeText } from '../hooks/useAutoSizeText';\nimport { useCarrelloOrdini } from '../hooks/useCarrelloOrdini';\nimport { useNuovoOrdine } from '../hooks/useNuovoOrdine';\nimport { useWineSearch } from '../hooks/useWineSearch';\nimport { useOrdersPinGate } from '../hooks/useOrdersPinGate';\nimport { supabase } from '../lib/supabase';\nimport { isFeatureEnabled } from '../config/features';\n\nimport { WineType } from '../hooks/useWines';\n\nexport default function HomePage() {\n  const navigate = useNavigate();\n  const {\n    wines,\n    suppliers,\n    loading,\n    error,\n    refreshWines,\n    updateWineInventory,\n    updateWine\n  } = useWines();\n\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n  useEffect(() => {\n    // App senza autenticazione - sempre autenticato\n    setIsAuthenticated(true);\n  }, []);\n\n  const [filters, setFilters] = useState({ wineType: '', supplier: '', showAlertsOnly: false });\n  const [selectedWine, setSelectedWine] = useState<WineType | null>(null);\n  const [showFilterModal, setShowFilterModal] = useState(false);\n  const [showWineDetailsModal, setShowWineDetailsModal] = useState(false);\n  const [activeTab, setActiveTab] = useState(\"TUTTI I VINI\");\n  const [animatingInventory, setAnimatingInventory] = useState<string | null>(null);\n  const [showInventoryModal, setShowInventoryModal] = useState(false);\n  const [editingWine, setEditingWine] = useState<WineType | null>(null);\n\n  // Hook per gestire il modale Nuovo Ordine\n  const {\n    isNuovoOrdineModalOpen,\n    openNuovoOrdineModal,\n    closeNuovoOrdineModal,\n    handleAvanti\n  } = useNuovoOrdine();\n\n  // Hook per gestire il modale Carrello Ordini\n  const {\n    isCarrelloModalOpen,\n    openCarrelloModal,\n    closeCarrelloModal,\n    handleNuovoOrdine,\n    handleGestisciOrdini\n  } = useCarrelloOrdini({ onNuovoOrdine: openNuovoOrdineModal });\n\n  // Hook per gestire il PIN gate degli ordini\n  const {\n    isOrdersUnlocked,\n    isPinModalOpen,\n    openPinModal,\n    closePinModal,\n    validatePin,\n    unlock\n  } = useOrdersPinGate();\n\n  // Handler per il click del carrello con PIN gate\n  const handleCarrelloClick = () => {\n    if (isOrdersUnlocked) {\n      openCarrelloModal();\n    } else {\n      openPinModal();\n    }\n  };\n\n  // Handler per PIN valido\n  const handleValidPin = () => {\n    unlock();\n    openCarrelloModal();\n  };\n\n  // Auto-sizing per il testo del chip \"Tutti\"\n  const chipDisplayText = activeTab === 'TUTTI I VINI' ? 'Tutti' : \n                         activeTab === 'BOLLICINE ITALIANE' ? 'Bollicine IT' :\n                         activeTab === 'BOLLICINE FRANCESI' ? 'Bollicine FR' :\n                         activeTab === 'BIANCHI' ? 'Bianchi' :\n                         activeTab === 'ROSSI' ? 'Rossi' :\n                         activeTab === 'ROSATI' ? 'Rosati' :\n                         activeTab === 'VINI DOLCI' ? 'Dolci' : 'Tutti';\n\n  const { elementRef: chipTextRef } = useAutoSizeText({\n    text: chipDisplayText,\n    minFontSize: 12,\n    maxFontSize: 20,\n    paddingHorizontal: 32, // 16px * 2 dal CSS\n    caretWidth: 0, // nessun caret visibile\n    marginSafety: 6\n  });\n  \n\n  // Prima applico i filtri esistenti, poi la ricerca se abilitata\n  const baseFilteredWines = wines\n    .filter(wine => {\n    const normalizedType = (wine.type || '').toLowerCase(); // ✅ FIX crash\n\n    // Esclude le righe che sono solo nomi di tipologie (senza produttore/descrizione)\n    const isTypeHeaderOnly = !wine.description && !wine.supplier && \n      (wine.name === \"BIANCHI\" || wine.name === \"ROSSI\" || wine.name === \"ROSATI\" || \n       wine.name === \"BOLLICINE ITALIANE\" || wine.name === \"BOLLICINE FRANCESI\" || \n       wine.name === \"VINI DOLCI\");\n\n    if (isTypeHeaderOnly) {\n      return false;\n    }\n\n    const matchesCategory = \n      activeTab === \"TUTTI I VINI\" ||\n      (activeTab === \"BOLLICINE ITALIANE\" && (normalizedType === \"bollicine italiane\" || normalizedType === \"bollicine\")) ||\n      (activeTab === \"BOLLICINE FRANCESI\" && normalizedType === \"bollicine francesi\") ||\n      (activeTab === \"BIANCHI\" && (normalizedType === \"bianchi\" || normalizedType === \"bianco\")) ||\n      (activeTab === \"ROSSI\" && (normalizedType === \"rossi\" || normalizedType === \"rosso\")) ||\n      (activeTab === \"ROSATI\" && (normalizedType === \"rosati\" || normalizedType === \"rosato\")) ||\n      (activeTab === \"VINI DOLCI\" && (normalizedType === \"vini dolci\" || normalizedType === \"dolce\"));\n\n    const matchesType = !filters.wineType || normalizedType === filters.wineType;\n    const matchesSupplier = !filters.supplier || wine.supplier === filters.supplier;\n    // Logica alert: se showAlertsOnly è true, mostra SOLO vini con giacenza <= minStock\n    const isInAlert = wine.inventory <= wine.minStock;\n    const matchesAlerts = !filters.showAlertsOnly || isInAlert;\n    \n\n    return matchesCategory && matchesType && matchesSupplier && matchesAlerts;\n  })\n  .sort((a, b) => {\n    // ✅ Ordinamento alfabetico A-Z SOLO per \"TUTTI I VINI\"\n    if (activeTab === \"TUTTI I VINI\") {\n      return a.name.localeCompare(b.name, 'it', { \n        sensitivity: 'base',\n        numeric: true,\n        ignorePunctuation: true \n      });\n    }\n    // ✅ Per le singole tipologie, mantieni ordine originale del database/Google Sheet\n    return 0;\n  });\n\n  // Hook ricerca vini (solo se feature abilitata)\n  const wineSearch = useWineSearch(baseFilteredWines);\n\n  // Applico la ricerca se feature abilitata e ricerca attiva\n  const filteredWines = isFeatureEnabled('searchLens') && wineSearch.isFiltering \n    ? wineSearch.filteredWines.filter(wine => baseFilteredWines.some(bw => bw.id === wine.id))\n    : baseFilteredWines;\n\n  const handleInventoryChange = async (id: string, value: number) => {\n    const adjusted = Math.max(0, value);\n    console.log('🔄 Aggiornamento giacenza:', id, 'da', wines.find(w => w.id === id)?.inventory, 'a', adjusted);\n\n    // Aggiornamento ottimistico per feedback immediato\n    const previousInventory = wines.find(w => w.id === id)?.inventory || 0;\n\n    const success = await updateWineInventory(id, adjusted);\n    if (success) {\n      console.log('✅ Giacenza salvata correttamente su Supabase');\n      // Trigger animation feedback\n      setAnimatingInventory(id);\n      setTimeout(() => setAnimatingInventory(null), 600);\n    } else {\n      console.error('❌ Errore aggiornamento giacenza - rollback a:', previousInventory);\n      // In caso di errore, forza il refresh per sincronizzare\n      await refreshWines();\n    }\n  };\n\n  const handleWineClick = (wine: WineType) => {\n    setSelectedWine(wine);\n    setShowWineDetailsModal(true);\n  };\n\n\n  const handleTabChange = (category: string) => {\n    setActiveTab(category);\n  };\n\n\n  const handleUpdateWine = async (id: string, updates: Partial<WineType>): Promise<void> => {\n    await updateWine(id, updates);\n  };\n\n  // Gestione Modale Giacenza\n  const handleOpenInventoryModal = (wine: WineType) => {\n    setEditingWine(wine);\n    setShowInventoryModal(true);\n  };\n\n  const handleCloseInventoryModal = () => {\n    setShowInventoryModal(false);\n    setEditingWine(null);\n  };\n\n  const handleConfirmInventory = async (newValue: number) => {\n    if (!editingWine) return;\n    \n    // Chiudi modale immediatamente per UX fluida\n    handleCloseInventoryModal();\n    \n    // Animazione di conferma\n    setAnimatingInventory(editingWine.id);\n    \n    try {\n      await updateWineInventory(editingWine.id, newValue);\n      console.log('✅ Giacenza aggiornata con successo');\n    } catch (error) {\n      console.error('❌ Errore aggiornamento giacenza:', error);\n    } finally {\n      // Rimuovi animazione dopo 1 secondo\n      setTimeout(() => setAnimatingInventory(null), 1000);\n    }\n  };\n\n\n\n  if (!isAuthenticated) return (\n    <div className=\"min-h-screen bg-app-bg flex items-center justify-center\">\n      <p className=\"text-app-text\">Effettua l'accesso per vedere i tuoi vini</p>\n    </div>\n  );\n\n  if (loading) return (\n    <div className=\"min-h-screen bg-app-bg flex items-center justify-center\">\n      <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-app-accent\"></div>\n    </div>\n  );\n\n  if (error) return (\n    <div className=\"min-h-screen bg-app-bg flex items-center justify-center\">\n      <div className=\"text-center\">\n        <p className=\"text-app-danger mb-4\">{error}</p>\n        <button onClick={refreshWines} className=\"bg-app-accent hover:bg-app-accent/80 text-white px-4 py-2 rounded-lg\">\n          Riprova\n        </button>\n      </div>\n    </div>\n  );\n\n  return (\n    <div className=\"homepage-container\" style={{ \n      width: '100vw',\n      height: '100vh',\n      maxWidth: '100%',\n      overflow: 'hidden',\n      position: 'relative',\n      background: 'var(--bg)'\n    }}>\n      {/* HEADER FISSO */}\n      <header className=\"mobile-header\">\n        <div className=\"header-content\">\n          <div className=\"logo-wrap\">\n            <picture>\n              <source type=\"image/webp\" srcSet=\"/logo1.webp\" />\n              <img \n                src=\"/logo1.png\" \n                alt=\"WINENODE\"\n                loading=\"eager\"\n              />\n            </picture>\n          </div>\n        </div>\n      </header>\n\n      {/* CONTENT-LISTA SCROLLABILE */}\n      <main className=\"mobile-content\">\n        <div className=\"wine-list-container\"\n          style={{\n            height: '100%',\n            overflow: 'auto',\n            WebkitOverflowScrolling: 'touch',\n            overscrollBehavior: 'none',\n            touchAction: 'pan-y',\n            scrollBehavior: 'smooth'\n          }}\n        >\n          {/* Barra di ricerca (se feature abilitata) */}\n          {isFeatureEnabled('searchLens') && (\n            <WineSearchBar\n              isOpen={wineSearch.isSearchOpen}\n              searchQuery={wineSearch.searchQuery}\n              onQueryChange={wineSearch.updateQuery}\n              onClose={wineSearch.closeSearch}\n              onClear={wineSearch.clearSearch}\n            />\n          )}\n\n          {filteredWines.length === 0 ? (\n            <p className=\"text-center text-sm\" style={{ color: 'var(--muted)' }}>\n              {wines.length === 0 ? 'Nessun vino nel tuo inventario' : 'Nessun vino trovato con i filtri selezionati'}\n            </p>\n          ) : (\n            <div \n              className=\"space-y-0.5 sm:space-y-1 overflow-x-hidden w-full\"\n              style={{\n                paddingBottom: 'calc(64pt + env(safe-area-inset-bottom, 0px) + 12pt)'\n              }}\n            >\n              {filteredWines.map(wine => (\n                <div key={wine.id} className=\"wine-card rounded-lg overflow-x-hidden w-full max-w-full\" style={{ \n                  background: 'var(--surface-2)',\n                  border: '1px solid var(--border)',\n                  padding: '6px 8px',\n                  boxShadow: 'var(--shadow)',\n                  touchAction: 'manipulation',\n                  WebkitTapHighlightColor: 'transparent'\n                }}>\n                  <div className=\"flex items-center justify-between gap-2 sm:gap-3 overflow-x-hidden w-full\">\n                    <div className=\"flex-1 cursor-pointer overflow-x-hidden min-w-0\" onClick={() => handleWineClick(wine)}>\n                      <div className=\"flex flex-col gap-0.5 sm:gap-1 overflow-x-hidden min-w-0\">\n                        {/* Prima riga: Nome vino tutto maiuscolo */}\n                        <div className=\"text-xs sm:text-sm font-semibold truncate overflow-x-hidden uppercase leading-tight\" style={{ color: 'var(--text)' }}>\n                          {wine.name}\n                        </div>\n                        {/* Seconda riga: Anno · Produttore · Fornitore € Prezzo */}\n                        <div className=\"text-xs truncate overflow-x-hidden leading-tight\" style={{ fontSize: '10px' }}>\n                          {wine.vintage && (\n                            <>\n                              <span className=\"vintage\" style={{ color: 'var(--muted-text)' }}>{wine.vintage}</span>\n                              {(wine.description || (wine.supplier && wine.supplier.trim() && wine.supplier.trim() !== 'Non specificato')) && (\n                                <span className=\"mx-2\" style={{ color: 'var(--muted-text)' }}>·</span>\n                              )}\n                            </>\n                          )}\n                          {wine.description && (\n                            <>\n                              <span className=\"producer\" style={{ color: 'var(--muted-text)' }}>{wine.description}</span>\n                              {wine.supplier && wine.supplier.trim() && wine.supplier.trim() !== 'Non specificato' && (\n                                <span className=\"mx-2\" style={{ color: 'var(--muted-text)' }}>·</span>\n                              )}\n                            </>\n                          )}\n                          {wine.supplier && wine.supplier.trim() && wine.supplier.trim() !== 'Non specificato' && (\n                            <span className=\"font-medium\" style={{ color: 'var(--warn)' }}>{wine.supplier}</span>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                    {wine.inventory <= wine.minStock && (\n                      <PhosphorBell \n                        className=\"flex-shrink-0 mr-2\" \n                        style={{ \n                          width: '18px', \n                          height: '18px', \n                          color: 'var(--danger)' \n                        }}\n                        aria-hidden=\"true\" \n                      />\n                    )}\n                    <div className=\"flex items-center flex-shrink-0 ml-auto\">\n                      <span \n                        onClick={e => { \n                          e.stopPropagation(); \n                          handleOpenInventoryModal(wine);\n                        }}\n                        className={`font-bold text-sm sm:text-base cursor-pointer text-center py-2 px-2 transition-all duration-200 rounded-lg ${\n                          animatingInventory === wine.id ? 'animate-pulse' : ''\n                        }`}\n                        style={{ \n                          color: wine.inventory <= wine.minStock ? 'var(--danger)' : 'var(--text)',\n                          minWidth: '44px',\n                          minHeight: '44px',\n                          display: 'flex',\n                          alignItems: 'center',\n                          justifyContent: 'center',\n                          backgroundColor: animatingInventory === wine.id ? 'var(--warn)' : 'transparent',\n                          fontWeight: wine.inventory <= wine.minStock ? 'bold' : 'normal'\n                        }}\n                      >\n                        {wine.inventory || 0}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      </main>\n\n      {/* NAVBAR FISSA IN BASSO */}\n      <nav className=\"mobile-navbar\">\n        {/* Gruppo icone a sinistra */}\n        <div className=\"nav-icons-group\">\n          <button \n            onClick={handleCarrelloClick}\n            className=\"nav-btn btn-ordine\"\n            title=\"Carrello Ordini\"\n          >\n            <PhosphorCart className=\"icon\" aria-hidden=\"true\" />\n          </button>\n          \n          <button \n            onClick={() => setShowFilterModal(true)} \n            className=\"nav-btn btn-filtri\"\n            title=\"Filtri\"\n            style={{ \n              background: (filters.wineType || filters.supplier) ? '#d4a300' : 'transparent',\n              color: (filters.wineType || filters.supplier) ? 'white' : 'var(--text)',\n              borderRadius: '8px',\n              border: 'none',\n              outline: 'none',\n              WebkitTapHighlightColor: 'transparent',\n              WebkitAppearance: 'none',\n              appearance: 'none'\n            } as React.CSSProperties}\n          >\n            <PhosphorFunnel \n              className=\"icon\" \n              aria-hidden=\"true\"\n              style={{\n                color: (filters.wineType || filters.supplier) ? 'white' : 'var(--text)'\n              }}\n            />\n          </button>\n          \n          <button\n            onClick={() => setFilters(prev => ({ ...prev, showAlertsOnly: !prev.showAlertsOnly }))}\n            className=\"nav-btn btn-allert\"\n            title={filters.showAlertsOnly ? \"Mostra tutti i vini\" : \"Mostra solo vini in esaurimento\"}\n            style={{ \n              background: filters.showAlertsOnly ? 'var(--danger)' : 'transparent',\n              color: filters.showAlertsOnly ? 'white' : 'var(--text)',\n              borderRadius: '8px',\n              border: 'none',\n              outline: 'none',\n              WebkitTapHighlightColor: 'transparent',\n              WebkitAppearance: 'none',\n              appearance: 'none'\n            } as React.CSSProperties}\n          >\n            <PhosphorBell \n              className=\"icon\" \n              aria-hidden=\"true\"\n              style={{\n                color: filters.showAlertsOnly ? 'white' : 'var(--text)'\n              }}\n            />\n          </button>\n          \n          {/* Icona lente ricerca (se feature abilitata) */}\n          {isFeatureEnabled('searchLens') && (\n            <button\n              onClick={wineSearch.toggleSearch}\n              className=\"nav-btn btn-search\"\n              title={wineSearch.isSearchOpen ? \"Chiudi ricerca\" : \"Cerca vini\"}\n              aria-label={wineSearch.isSearchOpen ? \"Chiudi ricerca\" : \"Apri ricerca\"}\n              style={{ \n                background: wineSearch.isSearchOpen ? 'var(--accent)' : 'transparent',\n                color: wineSearch.isSearchOpen ? 'white' : 'var(--text)',\n                borderRadius: '8px',\n                border: 'none',\n                outline: 'none',\n                WebkitTapHighlightColor: 'transparent',\n                WebkitAppearance: 'none',\n                appearance: 'none'\n              } as React.CSSProperties}\n            >\n              <PhosphorMagnifyingGlass \n                className=\"icon\" \n                aria-hidden=\"true\"\n                style={{\n                  color: wineSearch.isSearchOpen ? 'white' : 'var(--text)'\n                }}\n              />\n            </button>\n          )}\n        </div>\n        \n        {/* Pulsante \"Tutti\" a destra */}\n        <button\n          onClick={() => {/* Toggle dropdown logic */}}\n          className=\"nav-btn btn-tutti\"\n          title=\"Seleziona categoria\"\n          aria-label={`Filtro attivo: ${activeTab}`}\n        >\n          <span \n            ref={chipTextRef}\n            className=\"label\"\n            style={{ \n              whiteSpace: 'nowrap',\n              overflow: 'hidden',\n              textOverflow: 'ellipsis',\n              display: 'block',\n              width: '100%'\n            }}\n          >\n            {chipDisplayText}\n          </span>\n          <select\n            value={activeTab}\n            onChange={(e) => handleTabChange(e.target.value)}\n            style={{ \n              position: 'absolute', \n              top: 0, \n              left: 0, \n              width: '100%', \n              height: '100%', \n              opacity: 0, \n              cursor: 'pointer' \n            }}\n          >\n            <option value=\"TUTTI I VINI\">TUTTI</option>\n            <option value=\"BOLLICINE ITALIANE\">Bollicine IT</option>\n            <option value=\"BOLLICINE FRANCESI\">Bollicine FR</option>\n            <option value=\"BIANCHI\">Bianchi</option>\n            <option value=\"ROSSI\">Rossi</option>\n            <option value=\"ROSATI\">Rosati</option>\n            <option value=\"VINI DOLCI\">Vini Dolci</option>\n          </select>\n        </button>\n      </nav>\n\n      <FilterModal \n        open={showFilterModal} \n        onOpenChange={setShowFilterModal} \n        filters={filters} \n        onFiltersChange={setFilters}\n        wines={wines}\n      />\n      <WineDetailsModal wine={selectedWine} open={showWineDetailsModal} onOpenChange={setShowWineDetailsModal} onUpdateWine={handleUpdateWine} suppliers={suppliers} />\n\n      <HomeInventoryModal\n        isOpen={showInventoryModal}\n        initialValue={editingWine?.inventory || 0}\n        onConfirm={handleConfirmInventory}\n        onCancel={handleCloseInventoryModal}\n        min={0}\n        max={999}\n      />\n\n      <CarrelloOrdiniModal\n        isOpen={isCarrelloModalOpen}\n        onOpenChange={closeCarrelloModal}\n        onNuovoOrdine={handleNuovoOrdine}\n        onGestisciOrdini={handleGestisciOrdini}\n      />\n\n      <NuovoOrdineModal\n        isOpen={isNuovoOrdineModalOpen}\n        onOpenChange={closeNuovoOrdineModal}\n        onAvanti={handleAvanti}\n      />\n\n      <OrdersPinModal\n        open={isPinModalOpen}\n        onClose={closePinModal}\n        onValidPin={handleValidPin}\n        onInvalidPin={() => {}} // Gestito internamente dal modale\n        validatePin={validatePin}\n      />\n      \n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/dero/Documents/winenode_main/src/pages/ImportaPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/dero/Documents/winenode_main/src/pages/ManualWineInsertPage.tsx","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Function 'ManualWineInsertPage' has too many lines (550). Maximum allowed is 400.","line":12,"column":16,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":632,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState } from \"react\";\nimport { Sparkles, Upload, RotateCcw, ArrowLeft, Home } from \"lucide-react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { supabase } from \"../lib/supabase\";\nimport { toast } from \"sonner\";\nimport useWines from '../hooks/useWines';\nimport { getUserId } from '../config/constants';\n\n// Hook rimosso - app senza autenticazione\n// function useUser() rimosso\n\nexport default function ManualWineInsertPage() {\n  const navigate = useNavigate();\n  // const user = useUser(); // Rimosso - app senza autenticazione\n  const { refreshWines } = useWines();\n\n  // Stati per i dropdown - ora con valori persistenti\n  const [categoria, setCategoria] = useState(\"\");\n  const [fornitore, setFornitore] = useState(\"\");\n  const [sogliaMinima, setSogliaMinima] = useState(\"2\");\n  const [giacenza, setGiacenza] = useState(\"0\");\n\n  // Stato per tracciare le selezioni dell'utente\n  const [selectedTipologia, setSelectedTipologia] = useState(\"\");\n  const [testo, setTesto] = useState(\"\");\n  const [righeRiconosciute, setRigheRiconosciute] = useState(0);\n  const [showAddCategoryModal, setShowAddCategoryModal] = useState(false);\n  const [newCategoryName, setNewCategoryName] = useState(\"\");\n  const [showErrorMessage, setShowErrorMessage] = useState(false);\n  const [showSuccessMessage, setShowSuccessMessage] = useState(false);\n  const [showConfirmModal, setShowConfirmModal] = useState(false);\n  const [confirmAction, setConfirmAction] = useState<'add' | 'replace' | null>(null);\n\n  function parseWineText(inputText: string): string[] {\n    // Pulisce caratteri invisibili e sostituisce con newline standard\n    const cleanText = inputText\n      .replace(/[\\u2028\\r]/g, '\\n')     // converte \\u2028 e \\r in newline classico\n      .replace(/\\n{2,}/g, '\\n')         // rimuove righe vuote multiple\n\n    // Divide per righe e rimuove righe vuote\n    return cleanText.split('\\n').map(line => line.trim()).filter(line => line !== '');\n  }\n\n  function ottimizzaTesto() {\n    // Funzione AI disabilitata - solo parsing semplice\n    const righe = parseWineText(testo);\n    const risultatoFinale = righe.join('\\n');\n    setTesto(risultatoFinale);\n    setRigheRiconosciute(righe.length);\n\n    // Aggiorna il contatore nel DOM\n    const countElement = document.getElementById(\"count-righe\");\n    if (countElement) {\n      countElement.textContent = `${righe.length}`;\n    }\n  }\n\n  async function aggiungiCategoria() {\n    if (!newCategoryName.trim()) return;\n\n    try {\n      // App senza autenticazione - usa SERVICE_USER_ID\n      const { error } = await supabase\n        .from(\"categorie\")\n        .insert({\n          user_id: getUserId(),\n          nome: newCategoryName.trim(),\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString()\n        });\n\n      if (error) {\n        console.error(error);\n        toast.error(\"Errore nell'aggiunta della categoria.\");\n      } else {\n        setCategoria(newCategoryName.trim());\n        toast.success(\"Categoria aggiunta con successo!\");\n        setNewCategoryName(\"\");\n        setShowAddCategoryModal(false);\n      }\n    } catch (error) {\n      console.error(\"Errore:\", error);\n      toast.error(\"Errore durante l'aggiunta della categoria.\");\n    }\n  }\n\n\n  function richiediConferma(sostituisci: boolean) {\n    // 1. Controlla che sia stato selezionato un tipo di vino\n    if (!selectedTipologia || selectedTipologia === \"\") {\n      setShowErrorMessage(true);\n      // Nascondi il messaggio dopo 5 secondi\n      setTimeout(() => {\n        setShowErrorMessage(false);\n      }, 5000);\n      return;\n    }\n\n    // 2. Mostra modal di conferma\n    setConfirmAction(sostituisci ? 'replace' : 'add');\n    setShowConfirmModal(true);\n  }\n\n  async function salvaVini(sostituisci: boolean) {\n\n    // 2. Ottieni il valore del textarea\n    const testoVini = (document.getElementById(\"elenco-vini\") as HTMLTextAreaElement)?.value || testo;\n\n    // 3. Usa parseWineText per processare correttamente il testo\n    const lista = parseWineText(testoVini);\n\n    if (lista.length === 0) return toast.warning(\"Nessun vino da salvare.\");\n\n    try {\n      // App senza autenticazione - usa SERVICE_USER_ID\n      const userId = getUserId();\n\n      // 4. Se sostituisci === true, cancella i vecchi vini dell'utente in quella categoria\n      if (sostituisci) {\n        // Cancella i vini esistenti per quella categoria\n        const { error: deleteError } = await supabase\n          .from(\"vini\")\n          .delete()\n          .eq(\"user_id\", userId)\n          .eq(\"tipologia\", categoria.toLowerCase());\n\n        if (deleteError) {\n          console.error(deleteError);\n          return toast.error(\"Errore nella cancellazione dei vini esistenti.\");\n        }\n      }\n\n      // 5. Inserisci i nuovi vini nella tabella vini\n      const viniDaSalvare = lista.map((nomeVino) => ({\n        nome_vino: nomeVino,\n        tipologia: categoria.toLowerCase(),\n        fornitore: fornitore || \"Da definire\",\n        min_stock: parseInt(sogliaMinima) || 2,\n        vendita: 0,\n        user_id: userId,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      }));\n\n      const { data: viniInseriti, error: insertError } = await supabase\n        .from(\"vini\")\n        .insert(viniDaSalvare)\n        .select('id');\n\n      if (insertError) {\n        console.error(insertError);\n        return toast.error(\"Errore nell'inserimento dei vini.\");\n      }\n\n      // 6. Inserisci le giacenze nella tabella giacenza\n      const giacenzeDaSalvare = viniInseriti.map((vino) => ({\n        vino_id: vino.id,\n        giacenzaa: parseInt(giacenza) || 0,\n        user_id: userId,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      }));\n\n      const { error: giacenzaError } = await supabase\n        .from(\"giacenza\")\n        .insert(giacenzeDaSalvare);\n\n      if (insertError) {\n        console.error(insertError);\n        toast.error(\"Errore nel salvataggio dei vini.\");\n      } else {\n        // Mostra messaggio di successo\n        setShowSuccessMessage(true);\n        // Nascondi il messaggio dopo 5 secondi\n        setTimeout(() => {\n          setShowSuccessMessage(false);\n        }, 5000);\n\n        // Refresh della lista vini per aggiornarla nell'homepage\n        await refreshWines();\n\n        // Reset completo dei campi dopo il salvataggio\n        setTesto(\"\");\n        setRigheRiconosciute(0);\n        setSelectedTipologia(\"\");\n        setCategoria(\"\");\n        setFornitore(\"\");\n\n        // Aggiorna anche il contatore nel DOM\n        const countElement = document.getElementById(\"count-righe\");\n        if (countElement) {\n          countElement.textContent = \"0\";\n        }\n      }\n\n    } catch (error) {\n      console.error(\"Errore generale:\", error);\n      toast.error(\"Errore durante il salvataggio.\");\n    }\n  }\n\n  return (\n    <div \n      className=\"min-h-screen text-white\"\n      style={{\n        background: \"linear-gradient(to bottom right, #1f0202, #2d0505, #1f0202)\",\n      }}\n    >\n      {/* Header */}\n      <header className=\"border-b border-red-900/30 bg-black/30 backdrop-blur-sm\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-between h-20\">\n            <button\n              onClick={() => navigate('/')}\n              className=\"p-2 text-white hover:text-cream hover:bg-white/10 rounded-full transition-all duration-200 hover:scale-105\"\n              title=\"Torna alla home\"\n              style={{\n                filter: \"brightness(1.3)\",\n                backgroundColor: \"rgba(255, 255, 255, 0.1)\",\n                backdropFilter: \"blur(10px)\",\n                border: \"1px solid rgba(255, 255, 255, 0.2)\"\n              }}\n            >\n              <svg \n                className=\"h-6 w-6\" \n                fill=\"none\" \n                stroke=\"currentColor\" \n                viewBox=\"0 0 24 24\"\n                strokeWidth=\"2.5\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n              >\n                <path d=\"M19 12H5M12 19l-7-7 7-7\"/>\n              </svg>\n            </button>\n            <img \n                src=\"/logo1.png\" \n                alt=\"WINENODE\" \n                className=\"h-32 w-auto object-contain\" \n              />\n            <button\n              onClick={() => navigate(\"/\")}\n              className=\"p-2 text-white hover:text-cream hover:bg-gray-800 rounded-lg transition-colors\"\n              title=\"Vai alla home\"\n              style={{\n                filter: \"brightness(1.2)\",\n                color: \"#ffffff\"\n              }}\n            >\n              <Home className=\"h-6 w-6\" />\n            </button>\n          </div>\n        </div>\n      </header>\n\n      {/* Contenuto principale */}\n      <div \n        className=\"max-w-xl mx-auto\"\n        style={{ \n          padding: \"20px\"\n        }}\n      >\n        {/* Titolo principale */}\n        <h1 className=\"text-2xl font-bold text-center text-cream mb-6\">\n          INSERISCI LISTA VINI\n        </h1>\n\n\n\n        <div className=\"mb-2\">\n          <div className=\"text-sm text-gray-400 flex items-center justify-between\">\n            <div className=\"flex items-center gap-2\">\n              <span>Incolla qui dentro la lista vini e clicca qui</span>\n              <button\n                onClick={ottimizzaTesto}\n                className=\"text-yellow-500 hover:text-yellow-600 inline-flex items-center\"\n                title=\"Ottimizza testo\"\n              >\n                <svg \n                  className=\"w-6 h-6\" \n                  viewBox=\"0 0 24 24\" \n                  fill=\"none\"\n                >\n                  <g>\n                    {/* Stella grande centrale */}\n                    <path \n                      d=\"M12 2L13.09 8.26L19 9L13.09 9.74L12 16L10.91 9.74L5 9L10.91 8.26L12 2Z\" \n                      fill=\"#FFD700\" \n                      stroke=\"#FFA500\" \n                      strokeWidth=\"0.5\"\n                    />\n                    {/* Stella piccola in alto a destra */}\n                    <path \n                      d=\"M18 5L18.5 6.5L20 7L18.5 7.5L18 9L17.5 7.5L16 7L17.5 6.5L18 5Z\" \n                      fill=\"#FFD700\"\n                    />\n                    {/* Stella piccola in basso a sinistra */}\n                    <path \n                      d=\"M6 18L6.5 19.5L8 20L6.5 20.5L6 22L5.5 20.5L4 20L5.5 19.5L6 18Z\" \n                      fill=\"#FFD700\"\n                    />\n                  </g>\n                </svg>\n                <span className=\"text-white font-bold\">AI</span>\n              </button>\n            </div>\n            <div id=\"count-righe\" className=\"text-green-400 text-sm mr-4\">\n              {righeRiconosciute}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"relative mb-4\">\n          <textarea\n            id=\"elenco-vini\"\n            rows={10}\n            placeholder=\"Es: Soave Classico DOC Inama, Veneto\"\n            className=\"text-sm border border-[#4a2a2a]\"\n            style={{\n              borderRadius: \"12px\",\n              padding: \"12px\",\n              backgroundColor: \"rgba(50, 0, 0, 0.6)\",\n              color: \"white\",\n              width: \"100%\"\n            }}\n            value={testo}\n            onChange={(e) => setTesto(e.target.value)}\n          />\n        </div>\n\n        <div className=\"mb-4\">\n          {/* Messaggio di errore */}\n          {showErrorMessage && (\n            <div className=\"mb-3 p-3 rounded-lg border border-yellow-500 bg-yellow-500/10\">\n              <p className=\"text-yellow-300 text-sm font-medium\">\n                ⚠️ Seleziona almeno una tipologia di vino prima di salvare la lista.\n              </p>\n            </div>\n          )}\n\n          {/* Messaggio di successo */}\n          {showSuccessMessage && (\n            <div className=\"mb-3 p-3 rounded-lg border border-green-500 bg-green-500/10\">\n              <p className=\"text-green-300 text-sm font-medium\">\n                ✅ Lista vini salvata con successo!\n              </p>\n            </div>\n          )}\n\n          <div className=\"text-sm text-gray-400 mb-2\">\n            Seleziona TIPOLOGIA vino (obbligatorio)\n          </div>\n          <div \n            className=\"flex items-center gap-3 p-2 border border-[#4a2a2a]\"\n            style={{\n              borderRadius: \"12px\",\n              backgroundColor: \"rgba(50, 0, 0, 0.6)\"\n            }}\n          >\n            <select\n              className=\"flex-1 bg-transparent text-white border-none outline-none\"\n              style={{\n                padding: \"8px 0\",\n                fontSize: \"16px\",\n                appearance: \"none\",\n                backgroundImage: \"url('data:image/svg+xml;charset=US-ASCII,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 4 5\\\"><path fill=\\\"%23ffffff\\\" d=\\\"M2 0L0 2h4zm0 5L0 3h4z\\\"/></svg>')\",\n                backgroundRepeat: \"no-repeat\",\n                backgroundPosition: \"8px center\",\n                backgroundSize: \"12px\",\n                paddingLeft: \"30px\"\n              }}\n              value={selectedTipologia}\n              onChange={(e) => {\n                const value = e.target.value;\n                setSelectedTipologia(value);\n                console.log('🔄 Tipologia selezionata:', value);\n              }}\n            >\n              <option value=\"\" style={{ color: '#6b7280' }}>seleziona...</option>\n              <option value=\"Bianco\">Bianco</option>\n              <option value=\"Rosso\">Rosso</option>\n              <option value=\"Bollicine\">Bollicine</option>\n              <option value=\"Rosato\">Rosato</option>\n              <option value=\"Dolce\">Dolce</option>\n            </select>\n\n            <button\n              onClick={() => setShowAddCategoryModal(true)}\n              className=\"flex items-center justify-center text-white hover:bg-red-700 transition-colors border border-[#2c1b1b]\"\n              style={{\n                width: \"36px\",\n                height: \"36px\",\n                borderRadius: \"8px\",\n                backgroundColor: \"rgba(80, 0, 0, 0.9)\",\n                fontSize: \"18px\",\n                fontWeight: \"bold\"\n              }}\n              title=\"Aggiungi categoria\"\n            >\n              +\n            </button>\n          </div>\n        </div>\n\n        <div className=\"mb-4\">\n          <div className=\"text-sm text-gray-400 mb-2\">\n            FORNITORE (opzionale)\n          </div>\n          <div \n            className=\"flex items-center gap-3 p-2 border border-[#4a2a2a]\"\n            style={{\n              borderRadius: \"12px\",\n              backgroundColor: \"rgba(50, 0, 0, 0.6)\"\n            }}\n          >\n            <input\n              type=\"text\"\n              className=\"flex-1 bg-transparent text-white border-none outline-none\"\n              style={{\n                padding: \"8px 0\",\n                fontSize: \"16px\",\n                paddingLeft: \"8px\"\n              }}\n              value={fornitore}\n              onChange={(e) => setFornitore(e.target.value)}\n              placeholder=\"Nome fornitore...\"\n            />\n          </div>\n        </div>\n\n        {/* Campi Soglia Minima e Giacenza */}\n        <div className=\"flex gap-3 mb-4\">\n          <div className=\"flex-1\">\n            <div className=\"text-sm text-gray-400 mb-2\">\n              Soglia Minima\n            </div>\n            <input\n              type=\"number\"\n              value={sogliaMinima}\n              onChange={(e) => setSogliaMinima(e.target.value)}\n              min=\"0\"\n              className=\"w-full p-3 border border-[#4a2a2a] text-white bg-transparent focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              style={{\n                borderRadius: \"12px\",\n                backgroundColor: \"rgba(50, 0, 0, 0.6)\"\n              }}\n              placeholder=\"2\"\n            />\n          </div>\n          <div className=\"flex-1\">\n            <div className=\"text-sm text-gray-400 mb-2\">\n              Giacenza\n            </div>\n            <input\n              type=\"number\"\n              value={giacenza}\n              onChange={(e) => setGiacenza(e.target.value)}\n              min=\"0\"\n              className=\"w-full p-3 border border-[#4a2a2a] text-white bg-transparent focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              style={{\n                borderRadius: \"12px\",\n                backgroundColor: \"rgba(50, 0, 0, 0.6)\"\n              }}\n              placeholder=\"0\"\n            />\n          </div>\n        </div>\n\n        <div className=\"flex items-center pt-2 gap-3\">\n          <button\n            className=\"flex items-center justify-center gap-2 text-white hover:opacity-90 transition-opacity\"\n            style={{\n              borderRadius: \"12px\",\n              padding: \"14px 20px\",\n              fontWeight: \"600\",\n              fontSize: \"16px\",\n              flex: \"1\",\n              backgroundColor: \"#166534\"\n            }}\n            onClick={() => richiediConferma(false)}\n          >\n            <Upload className=\"w-4 h-4\" />\n            Aggiungi a lista esistente\n          </button>\n          <button\n            className=\"flex items-center justify-center gap-2 text-white hover:bg-[#455a6b] transition-colors\"\n            style={{\n              borderRadius: \"12px\",\n              padding: \"14px 20px\",\n              fontWeight: \"600\",\n              fontSize: \"16px\",\n              flex: \"1\",\n              backgroundColor: \"#526D82\"\n            }}\n            onClick={() => richiediConferma(true)}\n          >\n            <RotateCcw className=\"w-4 h-4\" />\n            Sostituisci lista esistente\n          </button>\n        </div>\n      </div>\n\n      {/* Modal Aggiungi Categoria */}\n      {showAddCategoryModal && (\n        <div className=\"fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50 p-4\">\n          <div className=\"bg-gray-900 border border-gray-700 rounded-lg w-full max-w-md\">\n            <div className=\"flex items-center justify-between p-4 border-b border-gray-700\">\n              <h3 className=\"text-xl font-bold text-cream\">Aggiungi Categoria</h3>\n              <button\n                onClick={() => {\n                  setShowAddCategoryModal(false);\n                  setNewCategoryName(\"\");\n                }}\n                className=\"text-gray-400 hover:text-cream\"\n              >\n                ×\n              </button>\n            </div>\n\n            <div className=\"p-4 space-y-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                  Nome Categoria\n                </label>\n                <input\n                  type=\"text\"\n                  value={newCategoryName}\n                  onChange={(e) => setNewCategoryName(e.target.value)}\n                  placeholder=\"Es: Dessert, Champagne...\"\n                  className=\"w-full bg-gray-800 border border-gray-600 rounded px-3 py-2 text-cream focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  autoFocus\n                />\n              </div>\n\n              <div className=\"flex gap-2 pt-2\">\n                <button\n                  onClick={() => {\n                    setShowAddCategoryModal(false);\n                    setNewCategoryName(\"\");\n                  }}\n                  className=\"flex-1 bg-gray-700 hover:bg-gray-600 text-cream rounded px-4 py-2 transition-colors\"\n                >\n                  Annulla\n                </button>\n                <button\n                  onClick={aggiungiCategoria}\n                  disabled={!newCategoryName.trim()}\n                  className=\"flex-1 bg-blue-600 hover:bg-blue-700 disabled:bg-gray-600 disabled:cursor-not-allowed text-cream rounded px-4 py-2 transition-colors\"\n                >\n                  Aggiungi\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Modal Conferma Salvataggio */}\n      {showConfirmModal && (\n        <div className=\"fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50 p-4\">\n          <div className=\"bg-gray-900 border border-gray-700 rounded-lg w-full max-w-md\">\n            <div className=\"flex items-center justify-between p-4 border-b border-gray-700\">\n              <h3 className=\"text-xl font-bold text-cream\">Conferma Salvataggio</h3>\n              <button\n                onClick={() => {\n                  setShowConfirmModal(false);\n                  setConfirmAction(null);\n                }}\n                className=\"text-gray-400 hover:text-cream\"\n              >\n                ×\n              </button>\n            </div>\n\n            <div className=\"p-4\">\n              <div className=\"mb-6\">\n                {confirmAction === 'replace' ? (\n                  <>\n                    <p className=\"text-red-300 text-center font-semibold\">\n                      🚨 ATTENZIONE: Stai per SOSTITUIRE completamente la lista esistente!\n                    </p>\n                    <p className=\"text-red-400 text-sm text-center mt-2\">\n                      Tutti i vini della categoria \"{selectedTipologia}\" verranno eliminati e sostituiti con questa nuova lista.\n                    </p>\n                    <p className=\"text-gray-400 text-sm text-center mt-2\">\n                      Questa operazione NON può essere annullata. Sei sicuro di voler procedere?\n                    </p>\n                  </>\n                ) : (\n                  <>\n                    <p className=\"text-gray-300 text-center\">\n                      ⚠️ Sei sicuro di voler salvare la lista vini?\n                    </p>\n                    <p className=\"text-gray-400 text-sm text-center mt-2\">\n                      Premi \"Conferma\" per procedere, oppure \"Annulla\" per modificare.\n                    </p>\n                  </>\n                )}\n              </div>\n\n              <div className=\"flex gap-3\">\n                <button\n                  onClick={() => {\n                    setShowConfirmModal(false);\n                    setConfirmAction(null);\n                  }}\n                  className=\"flex-1 bg-gray-700 hover:bg-gray-600 text-cream rounded px-4 py-2 transition-colors\"\n                >\n                  Annulla\n                </button>\n                <button\n                  onClick={() => {\n                    setShowConfirmModal(false);\n                    if (confirmAction === 'add') {\n                      salvaVini(false);\n                    } else if (confirmAction === 'replace') {\n                      salvaVini(true);\n                    }\n                    setConfirmAction(null);\n                  }}\n                  className=\"flex-1 bg-blue-600 hover:bg-blue-700 text-cream rounded px-4 py-2 transition-colors\"\n                >\n                  Conferma\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/dero/Documents/winenode_main/src/pages/PreferenzePage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/dero/Documents/winenode_main/src/pages/RiepilogoOrdinePage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/dero/Documents/winenode_main/src/pages/TabellaViniPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/dero/Documents/winenode_main/src/services/fornitori.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/dero/Documents/winenode_main/src/test/setup 2.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/dero/Documents/winenode_main/src/test/setup.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/dero/Documents/winenode_main/src/utils/buildWhatsAppMessage 2.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/dero/Documents/winenode_main/src/utils/buildWhatsAppMessage.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/dero/Documents/winenode_main/src/utils/buttonStyles 2.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/dero/Documents/winenode_main/src/utils/buttonStyles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/dero/Documents/winenode_main/src/utils/resetFirstLaunch.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/dero/Documents/winenode_main/src/utils/sanitization 2.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/dero/Documents/winenode_main/src/utils/sanitization.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/dero/Documents/winenode_main/src/utils/wineUtils 2.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/dero/Documents/winenode_main/src/utils/wineUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/dero/Documents/winenode_main/src/vite-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]
